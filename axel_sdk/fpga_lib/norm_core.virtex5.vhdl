--------------------------------------------------------------------
-- Name: norm_core.vhd
-- Created: 4/2/2009 @ 12:16
-- Description: this file contains the top level entity
-- Generated by: DK Design Suite, version 5.0.5395.19047
-- Family: Xilinx Virtex-5
-- Output Style: Xilinx Synthesis Tool
--
-- File structure:
--
-- -norm_core.vhd
--   +norm_core_hcc.vhd
--------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- this is the top level entity
ENTITY norm_core IS
  -- interface description
  PORT (
    iClk : IN std_logic;
    iLoadEnable : IN std_logic;
    iLoadValue : IN std_logic;
    iReset : IN std_logic;
    oRand : OUT std_logic_vector(23 DOWNTO 0)
  );
END;

-- this is the top level entity
ARCHITECTURE behaviour OF norm_core IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Power cable
  CONSTANT G_VCC : std_logic := '1';
  -- Ground cable
  CONSTANT G_GND : std_logic := '0';
  -- global connection
  SIGNAL G_oRand : unsigned(23 DOWNTO 0);

  -- Component declaration
  COMPONENT norm_core_hcc
  PORT (
    G_oRand_out : OUT unsigned(23 DOWNTO 0);
    iClk : IN std_logic;
    iLoadEnable : IN std_logic;
    iLoadValue : IN std_logic;
    iReset : IN std_logic
  );
  END COMPONENT;

BEGIN

  -- Port connections:

  oRand <= STD_LOGIC_VECTOR(G_oRand);


  -- Component instances:

  -- Instantiation
  I0_file : norm_core_hcc
    PORT MAP (
      G_oRand_out => G_oRand,
      iClk => iClk,
      iLoadEnable => iLoadEnable,
      iLoadValue => iLoadValue,
      iReset => iReset
    );

END;

--------------------------------------------------------------------
-- Name: norm_core_hcc.vhd
-- Created: 4/2/2009 @ 12:16
-- Description: e:\_dt10_\packages\norm_core\v2\norm_core.hcc
-- Generated by: DK Design Suite, version 5.0.5395.19047
-- Family: Xilinx Virtex-5
-- Output Style: Xilinx Synthesis Tool
--
-- File structure:
--
-- -norm_core.vhd
--   +norm_core_hcc.vhd
--------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- e:\_dt10_\packages\norm_core\v2\norm_core.hcc
ENTITY norm_core_hcc IS
  -- interface description
  PORT (
    G_oRand_out : OUT unsigned(23 DOWNTO 0);
    iClk : IN std_logic;
    iLoadEnable : IN std_logic;
    iLoadValue : IN std_logic;
    iReset : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C function: 'main'
ENTITY module_norm_core_norm_core_hcc_main IS
  -- interface description
  PORT (
    G_BinOpOut_out : OUT unsigned(23 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_StartOut : IN std_logic;
    iLoadEnable : IN std_logic;
    iLoadValue : IN std_logic;
    iReset : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'svNormGen'
ENTITY module_norm_core_svNormGen IS
  -- interface description
  PORT (
    G_BinOpOut_out : OUT unsigned(23 DOWNTO 0);
    G_leb : IN unsigned(0 DOWNTO 0);
    G_lev : IN unsigned(0 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_StartOut : IN std_logic;
    iReset : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


LIBRARY unisim;
USE unisim.vcomponents.ALL;
-- Handel-C macro: 'ww_pxSample'
ENTITY module_norm_core_ww_pxSample IS
  -- interface description
  PORT (
    G_BinOpOut_out : OUT unsigned(23 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_randVal : IN unsigned(127 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_Z_Dones_1_out : OUT std_logic;
    iReset : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'p2Add'
ENTITY module_norm_core_p2Add IS
  -- interface description
  PORT (
    G_BinOpOut_out : OUT unsigned(23 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_resBuff_0 : IN unsigned(23 DOWNTO 0);
    G_resBuff_1 : IN unsigned(23 DOWNTO 0);
    G_S_0 : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'ww_pxSingleSample'
ENTITY module_norm_core_ww_pxSingleSample IS
  -- interface description
  PORT (
    G_BinOpOut_1_out : OUT unsigned(23 DOWNTO 0);
    G_BinOpOut_5_out : OUT unsigned(8 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_DataOut_1 : IN unsigned(35 DOWNTO 0);
    G_randVal : IN unsigned(127 DOWNTO 0);
    G_S_0 : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'SingleSample_pxImpl'
ENTITY module_norm_core_SingleSample_pxImpl IS
  -- interface description
  PORT (
    G_BinOpOut_1_out : OUT unsigned(23 DOWNTO 0);
    G_BinOpOut_5_out : OUT unsigned(8 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_DataOut_1 : IN unsigned(35 DOWNTO 0);
    G_randVal : IN unsigned(127 DOWNTO 0);
    G_S_0 : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'p2Add'
ENTITY module_norm_core_p2Add_1 IS
  -- interface description
  PORT (
    G_BinOpOut_1_out : OUT unsigned(23 DOWNTO 0);
    G_c5_base : IN unsigned(9 DOWNTO 0);
    G_c5_ttDist : IN unsigned(14 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'pxDelayedAssign'
ENTITY module_norm_core_pxDelayedAssign IS
  -- interface description
  PORT (
    G_BinOpOut_2_out : OUT unsigned(14 DOWNTO 0);
    G_c4_tta : IN unsigned(14 DOWNTO 0);
    G_c4_ttb : IN unsigned(14 DOWNTO 0)
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'pxDelayedAssign'
ENTITY module_norm_core_pxDelayedAssign_1 IS
  -- interface description
  PORT (
    G_BinOpOut_3_out : OUT unsigned(9 DOWNTO 0);
    G_c4_index : IN unsigned(8 DOWNTO 0)
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'pxDelayedAssign'
ENTITY module_norm_core_pxDelayedAssign_2 IS
  -- interface description
  PORT (
    G_bufferZ_out : OUT unsigned(8 DOWNTO 0);
    G_c2_aliasWord : IN unsigned(35 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'pxDelayedAssign'
ENTITY module_norm_core_pxDelayedAssign_3 IS
  -- interface description
  PORT (
    G_bufferZ_1_out : OUT unsigned(8 DOWNTO 0);
    G_c2_index : IN unsigned(8 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'pxDelayedAssign'
ENTITY module_norm_core_pxDelayedAssign_4 IS
  -- interface description
  PORT (
    G_BinOpOut_4_out : OUT unsigned(63 DOWNTO 0);
    G_BinOpOut_5_out : OUT unsigned(8 DOWNTO 0);
    G_bufferZ_2_out : OUT unsigned(8 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_randVal : IN unsigned(127 DOWNTO 0);
    G_S_0 : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'ww_pxSingleSample'
ENTITY module_norm_core_ww_pxSingleSample_1 IS
  -- interface description
  PORT (
    G_BinOpOut_10_out : OUT unsigned(8 DOWNTO 0);
    G_BinOpOut_6_out : OUT unsigned(23 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_DataOut : IN unsigned(35 DOWNTO 0);
    G_randVal : IN unsigned(127 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_Z_Dones_1_out : OUT std_logic;
    iReset : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'SingleSample_pxImpl'
ENTITY module_norm_core_SingleSample_pxImpl_1 IS
  -- interface description
  PORT (
    G_BinOpOut_10_out : OUT unsigned(8 DOWNTO 0);
    G_BinOpOut_6_out : OUT unsigned(23 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_DataOut : IN unsigned(35 DOWNTO 0);
    G_randVal : IN unsigned(127 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_Z_Dones_1_out : OUT std_logic;
    iReset : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'p2Add'
ENTITY module_norm_core_p2Add_2 IS
  -- interface description
  PORT (
    G_BinOpOut_6_out : OUT unsigned(23 DOWNTO 0);
    G_c5_base_1 : IN unsigned(9 DOWNTO 0);
    G_c5_ttDist_1 : IN unsigned(14 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'pxDelayedAssign'
ENTITY module_norm_core_pxDelayedAssign_5 IS
  -- interface description
  PORT (
    G_BinOpOut_7_out : OUT unsigned(14 DOWNTO 0);
    G_c4_tta_1 : IN unsigned(14 DOWNTO 0);
    G_c4_ttb_1 : IN unsigned(14 DOWNTO 0)
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'pxDelayedAssign'
ENTITY module_norm_core_pxDelayedAssign_6 IS
  -- interface description
  PORT (
    G_BinOpOut_8_out : OUT unsigned(9 DOWNTO 0);
    G_c4_index_1 : IN unsigned(8 DOWNTO 0)
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'pxDelayedAssign'
ENTITY module_norm_core_pxDelayedAssign_7 IS
  -- interface description
  PORT (
    G_bufferZ_3_out : OUT unsigned(8 DOWNTO 0);
    G_c2_aliasWord_1 : IN unsigned(35 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'pxDelayedAssign'
ENTITY module_norm_core_pxDelayedAssign_8 IS
  -- interface description
  PORT (
    G_bufferZ_4_out : OUT unsigned(8 DOWNTO 0);
    G_c2_index_1 : IN unsigned(8 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'pxDelayedAssign'
ENTITY module_norm_core_pxDelayedAssign_9 IS
  -- interface description
  PORT (
    G_BinOpOut_10_out : OUT unsigned(8 DOWNTO 0);
    G_BinOpOut_9_out : OUT unsigned(63 DOWNTO 0);
    G_bufferZ_5_out : OUT unsigned(8 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_randVal : IN unsigned(127 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_Z_Dones_1_out : OUT std_logic;
    iReset : IN std_logic
  );
END;

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;


-- Handel-C macro: 'Gen128'
ENTITY module_norm_core_Gen128 IS
  -- interface description
  PORT (
    G_BinOpOut_11_out : OUT unsigned(127 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_leb : IN unsigned(0 DOWNTO 0);
    G_lev : IN unsigned(0 DOWNTO 0);
    G_loadValueDel_out : OUT unsigned(0 DOWNTO 0);
    G_randState_0 : IN unsigned(0 DOWNTO 0);
    G_randState_100_1 : IN unsigned(0 DOWNTO 0);
    G_randState_100_out : OUT unsigned(0 DOWNTO 0);
    G_randState_101_1 : IN unsigned(0 DOWNTO 0);
    G_randState_101_out : OUT unsigned(0 DOWNTO 0);
    G_randState_102_1 : IN unsigned(0 DOWNTO 0);
    G_randState_102_out : OUT unsigned(0 DOWNTO 0);
    G_randState_103_1 : IN unsigned(0 DOWNTO 0);
    G_randState_103_out : OUT unsigned(0 DOWNTO 0);
    G_randState_104_1 : IN unsigned(0 DOWNTO 0);
    G_randState_104_out : OUT unsigned(0 DOWNTO 0);
    G_randState_105_1 : IN unsigned(0 DOWNTO 0);
    G_randState_105_out : OUT unsigned(0 DOWNTO 0);
    G_randState_106_1 : IN unsigned(0 DOWNTO 0);
    G_randState_106_out : OUT unsigned(0 DOWNTO 0);
    G_randState_107_1 : IN unsigned(0 DOWNTO 0);
    G_randState_107_out : OUT unsigned(0 DOWNTO 0);
    G_randState_108_1 : IN unsigned(0 DOWNTO 0);
    G_randState_108_out : OUT unsigned(0 DOWNTO 0);
    G_randState_109_1 : IN unsigned(0 DOWNTO 0);
    G_randState_109_out : OUT unsigned(0 DOWNTO 0);
    G_randState_10_1 : IN unsigned(0 DOWNTO 0);
    G_randState_10_out : OUT unsigned(0 DOWNTO 0);
    G_randState_110_1 : IN unsigned(0 DOWNTO 0);
    G_randState_110_out : OUT unsigned(0 DOWNTO 0);
    G_randState_111_1 : IN unsigned(0 DOWNTO 0);
    G_randState_111_out : OUT unsigned(0 DOWNTO 0);
    G_randState_112_1 : IN unsigned(0 DOWNTO 0);
    G_randState_112_out : OUT unsigned(0 DOWNTO 0);
    G_randState_113_1 : IN unsigned(0 DOWNTO 0);
    G_randState_113_out : OUT unsigned(0 DOWNTO 0);
    G_randState_114_1 : IN unsigned(0 DOWNTO 0);
    G_randState_114_out : OUT unsigned(0 DOWNTO 0);
    G_randState_115_1 : IN unsigned(0 DOWNTO 0);
    G_randState_115_out : OUT unsigned(0 DOWNTO 0);
    G_randState_116_1 : IN unsigned(0 DOWNTO 0);
    G_randState_116_out : OUT unsigned(0 DOWNTO 0);
    G_randState_117_1 : IN unsigned(0 DOWNTO 0);
    G_randState_117_out : OUT unsigned(0 DOWNTO 0);
    G_randState_118_1 : IN unsigned(0 DOWNTO 0);
    G_randState_118_out : OUT unsigned(0 DOWNTO 0);
    G_randState_119_1 : IN unsigned(0 DOWNTO 0);
    G_randState_119_out : OUT unsigned(0 DOWNTO 0);
    G_randState_11_1 : IN unsigned(0 DOWNTO 0);
    G_randState_11_out : OUT unsigned(0 DOWNTO 0);
    G_randState_120_1 : IN unsigned(0 DOWNTO 0);
    G_randState_120_out : OUT unsigned(0 DOWNTO 0);
    G_randState_121_1 : IN unsigned(0 DOWNTO 0);
    G_randState_121_out : OUT unsigned(0 DOWNTO 0);
    G_randState_122_1 : IN unsigned(0 DOWNTO 0);
    G_randState_122_out : OUT unsigned(0 DOWNTO 0);
    G_randState_123_1 : IN unsigned(0 DOWNTO 0);
    G_randState_123_out : OUT unsigned(0 DOWNTO 0);
    G_randState_124_1 : IN unsigned(0 DOWNTO 0);
    G_randState_124_out : OUT unsigned(0 DOWNTO 0);
    G_randState_125_1 : IN unsigned(0 DOWNTO 0);
    G_randState_125_out : OUT unsigned(0 DOWNTO 0);
    G_randState_126_1 : IN unsigned(0 DOWNTO 0);
    G_randState_126_out : OUT unsigned(0 DOWNTO 0);
    G_randState_127_1 : IN unsigned(0 DOWNTO 0);
    G_randState_127_out : OUT unsigned(0 DOWNTO 0);
    G_randState_12_1 : IN unsigned(0 DOWNTO 0);
    G_randState_12_out : OUT unsigned(0 DOWNTO 0);
    G_randState_13_1 : IN unsigned(0 DOWNTO 0);
    G_randState_13_out : OUT unsigned(0 DOWNTO 0);
    G_randState_14_1 : IN unsigned(0 DOWNTO 0);
    G_randState_14_out : OUT unsigned(0 DOWNTO 0);
    G_randState_15_1 : IN unsigned(0 DOWNTO 0);
    G_randState_15_out : OUT unsigned(0 DOWNTO 0);
    G_randState_16_1 : IN unsigned(0 DOWNTO 0);
    G_randState_16_out : OUT unsigned(0 DOWNTO 0);
    G_randState_17_1 : IN unsigned(0 DOWNTO 0);
    G_randState_17_out : OUT unsigned(0 DOWNTO 0);
    G_randState_18_1 : IN unsigned(0 DOWNTO 0);
    G_randState_18_out : OUT unsigned(0 DOWNTO 0);
    G_randState_19_1 : IN unsigned(0 DOWNTO 0);
    G_randState_19_out : OUT unsigned(0 DOWNTO 0);
    G_randState_1_1 : IN unsigned(0 DOWNTO 0);
    G_randState_1_out : OUT unsigned(0 DOWNTO 0);
    G_randState_20_1 : IN unsigned(0 DOWNTO 0);
    G_randState_20_out : OUT unsigned(0 DOWNTO 0);
    G_randState_21_1 : IN unsigned(0 DOWNTO 0);
    G_randState_21_out : OUT unsigned(0 DOWNTO 0);
    G_randState_22_1 : IN unsigned(0 DOWNTO 0);
    G_randState_22_out : OUT unsigned(0 DOWNTO 0);
    G_randState_23_1 : IN unsigned(0 DOWNTO 0);
    G_randState_23_out : OUT unsigned(0 DOWNTO 0);
    G_randState_24_1 : IN unsigned(0 DOWNTO 0);
    G_randState_24_out : OUT unsigned(0 DOWNTO 0);
    G_randState_25_1 : IN unsigned(0 DOWNTO 0);
    G_randState_25_out : OUT unsigned(0 DOWNTO 0);
    G_randState_26_1 : IN unsigned(0 DOWNTO 0);
    G_randState_26_out : OUT unsigned(0 DOWNTO 0);
    G_randState_27_1 : IN unsigned(0 DOWNTO 0);
    G_randState_27_out : OUT unsigned(0 DOWNTO 0);
    G_randState_28_1 : IN unsigned(0 DOWNTO 0);
    G_randState_28_out : OUT unsigned(0 DOWNTO 0);
    G_randState_29_1 : IN unsigned(0 DOWNTO 0);
    G_randState_29_out : OUT unsigned(0 DOWNTO 0);
    G_randState_2_1 : IN unsigned(0 DOWNTO 0);
    G_randState_2_out : OUT unsigned(0 DOWNTO 0);
    G_randState_30_1 : IN unsigned(0 DOWNTO 0);
    G_randState_30_out : OUT unsigned(0 DOWNTO 0);
    G_randState_31_1 : IN unsigned(0 DOWNTO 0);
    G_randState_31_out : OUT unsigned(0 DOWNTO 0);
    G_randState_32_1 : IN unsigned(0 DOWNTO 0);
    G_randState_32_out : OUT unsigned(0 DOWNTO 0);
    G_randState_33_1 : IN unsigned(0 DOWNTO 0);
    G_randState_33_out : OUT unsigned(0 DOWNTO 0);
    G_randState_34_1 : IN unsigned(0 DOWNTO 0);
    G_randState_34_out : OUT unsigned(0 DOWNTO 0);
    G_randState_35_1 : IN unsigned(0 DOWNTO 0);
    G_randState_35_out : OUT unsigned(0 DOWNTO 0);
    G_randState_36_1 : IN unsigned(0 DOWNTO 0);
    G_randState_36_out : OUT unsigned(0 DOWNTO 0);
    G_randState_37_1 : IN unsigned(0 DOWNTO 0);
    G_randState_37_out : OUT unsigned(0 DOWNTO 0);
    G_randState_38_1 : IN unsigned(0 DOWNTO 0);
    G_randState_38_out : OUT unsigned(0 DOWNTO 0);
    G_randState_39_1 : IN unsigned(0 DOWNTO 0);
    G_randState_39_out : OUT unsigned(0 DOWNTO 0);
    G_randState_3_1 : IN unsigned(0 DOWNTO 0);
    G_randState_3_out : OUT unsigned(0 DOWNTO 0);
    G_randState_40_1 : IN unsigned(0 DOWNTO 0);
    G_randState_40_out : OUT unsigned(0 DOWNTO 0);
    G_randState_41_1 : IN unsigned(0 DOWNTO 0);
    G_randState_41_out : OUT unsigned(0 DOWNTO 0);
    G_randState_42_1 : IN unsigned(0 DOWNTO 0);
    G_randState_42_out : OUT unsigned(0 DOWNTO 0);
    G_randState_43_1 : IN unsigned(0 DOWNTO 0);
    G_randState_43_out : OUT unsigned(0 DOWNTO 0);
    G_randState_44_1 : IN unsigned(0 DOWNTO 0);
    G_randState_44_out : OUT unsigned(0 DOWNTO 0);
    G_randState_45_1 : IN unsigned(0 DOWNTO 0);
    G_randState_45_out : OUT unsigned(0 DOWNTO 0);
    G_randState_46_1 : IN unsigned(0 DOWNTO 0);
    G_randState_46_out : OUT unsigned(0 DOWNTO 0);
    G_randState_47_1 : IN unsigned(0 DOWNTO 0);
    G_randState_47_out : OUT unsigned(0 DOWNTO 0);
    G_randState_48_1 : IN unsigned(0 DOWNTO 0);
    G_randState_48_out : OUT unsigned(0 DOWNTO 0);
    G_randState_49_1 : IN unsigned(0 DOWNTO 0);
    G_randState_49_out : OUT unsigned(0 DOWNTO 0);
    G_randState_4_1 : IN unsigned(0 DOWNTO 0);
    G_randState_4_out : OUT unsigned(0 DOWNTO 0);
    G_randState_50_1 : IN unsigned(0 DOWNTO 0);
    G_randState_50_out : OUT unsigned(0 DOWNTO 0);
    G_randState_51_1 : IN unsigned(0 DOWNTO 0);
    G_randState_51_out : OUT unsigned(0 DOWNTO 0);
    G_randState_52_1 : IN unsigned(0 DOWNTO 0);
    G_randState_52_out : OUT unsigned(0 DOWNTO 0);
    G_randState_53_1 : IN unsigned(0 DOWNTO 0);
    G_randState_53_out : OUT unsigned(0 DOWNTO 0);
    G_randState_54_1 : IN unsigned(0 DOWNTO 0);
    G_randState_54_out : OUT unsigned(0 DOWNTO 0);
    G_randState_55_1 : IN unsigned(0 DOWNTO 0);
    G_randState_55_out : OUT unsigned(0 DOWNTO 0);
    G_randState_56_1 : IN unsigned(0 DOWNTO 0);
    G_randState_56_out : OUT unsigned(0 DOWNTO 0);
    G_randState_57_1 : IN unsigned(0 DOWNTO 0);
    G_randState_57_out : OUT unsigned(0 DOWNTO 0);
    G_randState_58_1 : IN unsigned(0 DOWNTO 0);
    G_randState_58_out : OUT unsigned(0 DOWNTO 0);
    G_randState_59_1 : IN unsigned(0 DOWNTO 0);
    G_randState_59_out : OUT unsigned(0 DOWNTO 0);
    G_randState_5_1 : IN unsigned(0 DOWNTO 0);
    G_randState_5_out : OUT unsigned(0 DOWNTO 0);
    G_randState_60_1 : IN unsigned(0 DOWNTO 0);
    G_randState_60_out : OUT unsigned(0 DOWNTO 0);
    G_randState_61_1 : IN unsigned(0 DOWNTO 0);
    G_randState_61_out : OUT unsigned(0 DOWNTO 0);
    G_randState_62_1 : IN unsigned(0 DOWNTO 0);
    G_randState_62_out : OUT unsigned(0 DOWNTO 0);
    G_randState_63_1 : IN unsigned(0 DOWNTO 0);
    G_randState_63_out : OUT unsigned(0 DOWNTO 0);
    G_randState_64_1 : IN unsigned(0 DOWNTO 0);
    G_randState_64_out : OUT unsigned(0 DOWNTO 0);
    G_randState_65_1 : IN unsigned(0 DOWNTO 0);
    G_randState_65_out : OUT unsigned(0 DOWNTO 0);
    G_randState_66_1 : IN unsigned(0 DOWNTO 0);
    G_randState_66_out : OUT unsigned(0 DOWNTO 0);
    G_randState_67_1 : IN unsigned(0 DOWNTO 0);
    G_randState_67_out : OUT unsigned(0 DOWNTO 0);
    G_randState_68_1 : IN unsigned(0 DOWNTO 0);
    G_randState_68_out : OUT unsigned(0 DOWNTO 0);
    G_randState_69_1 : IN unsigned(0 DOWNTO 0);
    G_randState_69_out : OUT unsigned(0 DOWNTO 0);
    G_randState_6_1 : IN unsigned(0 DOWNTO 0);
    G_randState_6_out : OUT unsigned(0 DOWNTO 0);
    G_randState_70_1 : IN unsigned(0 DOWNTO 0);
    G_randState_70_out : OUT unsigned(0 DOWNTO 0);
    G_randState_71_1 : IN unsigned(0 DOWNTO 0);
    G_randState_71_out : OUT unsigned(0 DOWNTO 0);
    G_randState_72_1 : IN unsigned(0 DOWNTO 0);
    G_randState_72_out : OUT unsigned(0 DOWNTO 0);
    G_randState_73_1 : IN unsigned(0 DOWNTO 0);
    G_randState_73_out : OUT unsigned(0 DOWNTO 0);
    G_randState_74_1 : IN unsigned(0 DOWNTO 0);
    G_randState_74_out : OUT unsigned(0 DOWNTO 0);
    G_randState_75_1 : IN unsigned(0 DOWNTO 0);
    G_randState_75_out : OUT unsigned(0 DOWNTO 0);
    G_randState_76_1 : IN unsigned(0 DOWNTO 0);
    G_randState_76_out : OUT unsigned(0 DOWNTO 0);
    G_randState_77_1 : IN unsigned(0 DOWNTO 0);
    G_randState_77_out : OUT unsigned(0 DOWNTO 0);
    G_randState_78_1 : IN unsigned(0 DOWNTO 0);
    G_randState_78_out : OUT unsigned(0 DOWNTO 0);
    G_randState_79_1 : IN unsigned(0 DOWNTO 0);
    G_randState_79_out : OUT unsigned(0 DOWNTO 0);
    G_randState_7_1 : IN unsigned(0 DOWNTO 0);
    G_randState_7_out : OUT unsigned(0 DOWNTO 0);
    G_randState_80_1 : IN unsigned(0 DOWNTO 0);
    G_randState_80_out : OUT unsigned(0 DOWNTO 0);
    G_randState_81_1 : IN unsigned(0 DOWNTO 0);
    G_randState_81_out : OUT unsigned(0 DOWNTO 0);
    G_randState_82_1 : IN unsigned(0 DOWNTO 0);
    G_randState_82_out : OUT unsigned(0 DOWNTO 0);
    G_randState_83_1 : IN unsigned(0 DOWNTO 0);
    G_randState_83_out : OUT unsigned(0 DOWNTO 0);
    G_randState_84_1 : IN unsigned(0 DOWNTO 0);
    G_randState_84_out : OUT unsigned(0 DOWNTO 0);
    G_randState_85_1 : IN unsigned(0 DOWNTO 0);
    G_randState_85_out : OUT unsigned(0 DOWNTO 0);
    G_randState_86_1 : IN unsigned(0 DOWNTO 0);
    G_randState_86_out : OUT unsigned(0 DOWNTO 0);
    G_randState_87_1 : IN unsigned(0 DOWNTO 0);
    G_randState_87_out : OUT unsigned(0 DOWNTO 0);
    G_randState_88_1 : IN unsigned(0 DOWNTO 0);
    G_randState_88_out : OUT unsigned(0 DOWNTO 0);
    G_randState_89_1 : IN unsigned(0 DOWNTO 0);
    G_randState_89_out : OUT unsigned(0 DOWNTO 0);
    G_randState_8_1 : IN unsigned(0 DOWNTO 0);
    G_randState_8_out : OUT unsigned(0 DOWNTO 0);
    G_randState_90_1 : IN unsigned(0 DOWNTO 0);
    G_randState_90_out : OUT unsigned(0 DOWNTO 0);
    G_randState_91_1 : IN unsigned(0 DOWNTO 0);
    G_randState_91_out : OUT unsigned(0 DOWNTO 0);
    G_randState_92_1 : IN unsigned(0 DOWNTO 0);
    G_randState_92_out : OUT unsigned(0 DOWNTO 0);
    G_randState_93_1 : IN unsigned(0 DOWNTO 0);
    G_randState_93_out : OUT unsigned(0 DOWNTO 0);
    G_randState_94_1 : IN unsigned(0 DOWNTO 0);
    G_randState_94_out : OUT unsigned(0 DOWNTO 0);
    G_randState_95_1 : IN unsigned(0 DOWNTO 0);
    G_randState_95_out : OUT unsigned(0 DOWNTO 0);
    G_randState_96_1 : IN unsigned(0 DOWNTO 0);
    G_randState_96_out : OUT unsigned(0 DOWNTO 0);
    G_randState_97_1 : IN unsigned(0 DOWNTO 0);
    G_randState_97_out : OUT unsigned(0 DOWNTO 0);
    G_randState_98_1 : IN unsigned(0 DOWNTO 0);
    G_randState_98_out : OUT unsigned(0 DOWNTO 0);
    G_randState_99_1 : IN unsigned(0 DOWNTO 0);
    G_randState_99_out : OUT unsigned(0 DOWNTO 0);
    G_randState_9_1 : IN unsigned(0 DOWNTO 0);
    G_randState_9_out : OUT unsigned(0 DOWNTO 0);
    G_S_0 : IN std_logic
  );
END;

-- e:\_dt10_\packages\norm_core\v2\norm_core.hcc
ARCHITECTURE behaviour OF norm_core_hcc IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Global constant
  CONSTANT G_VCC : std_logic := '1';
  -- Global constant
  CONSTANT G_GND : std_logic := '0';
  -- Register 'oRand'
  SIGNAL G_oRand : unsigned(23 DOWNTO 0);
  -- Start block
  SIGNAL G_StartOut : std_logic;
  -- Clock signal conversion
  SIGNAL G_S_0 : std_logic;
  -- global connection
  SIGNAL G_BinOpOut : unsigned(23 DOWNTO 0);

  -- Component declaration
  COMPONENT module_norm_core_norm_core_hcc_main
  PORT (
    G_BinOpOut_out : OUT unsigned(23 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_StartOut : IN std_logic;
    iLoadEnable : IN std_logic;
    iLoadValue : IN std_logic;
    iReset : IN std_logic
  );
  END COMPONENT;

BEGIN

  -- Processes:

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      IF ( iReset='1' ) THEN
        G_StartOut <= '1';
      ELSE
        G_StartOut <= G_GND;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'oRand'
      G_oRand <= G_BinOpOut;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  G_S_0 <= iClk;


  -- Port connections:

  G_oRand_out <= G_oRand;


  -- Component instances:

  -- Instantiation
  I0_module : module_norm_core_norm_core_hcc_main
    PORT MAP (
      G_BinOpOut_out => G_BinOpOut,
      G_S_0 => G_S_0,
      G_StartOut => G_StartOut,
      iLoadEnable => iLoadEnable,
      iLoadValue => iLoadValue,
      iReset => iReset
    );

END;

-- Handel-C function: 'main'
ARCHITECTURE behaviour OF module_norm_core_norm_core_hcc_main IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Global constant
  CONSTANT G_VCC : std_logic := '1';
  -- Register 'lev'
  SIGNAL G_lev : unsigned(0 DOWNTO 0);
  -- Register 'leb'
  SIGNAL G_leb : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut : unsigned(23 DOWNTO 0);

  -- Component declaration
  COMPONENT module_norm_core_svNormGen
  PORT (
    G_BinOpOut_out : OUT unsigned(23 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_StartOut : IN std_logic;
    G_leb : IN unsigned(0 DOWNTO 0);
    G_lev : IN unsigned(0 DOWNTO 0);
    iReset : IN std_logic
  );
  END COMPONENT;

BEGIN

  -- Processes:

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      IF ( iReset='1' ) THEN
        G_leb <= "0";
        G_lev <= "0";
      ELSE
        -- Update of register 'leb'
        G_leb <= unsigned(to_stdlogicvector(iLoadEnable));

        -- Update of register 'lev'
        G_lev <= unsigned(to_stdlogicvector(iLoadValue));
      END IF;
    END IF;
  END PROCESS;


  -- Port connections:

  G_BinOpOut_out <= G_BinOpOut;


  -- Component instances:

  -- Instantiation
  I0_module : module_norm_core_svNormGen
    PORT MAP (
      G_BinOpOut_out => G_BinOpOut,
      G_S_0 => G_S_0,
      G_StartOut => G_StartOut,
      G_leb => G_leb,
      G_lev => G_lev,
      iReset => iReset
    );

END;

-- Handel-C macro: 'svNormGen'
ARCHITECTURE behaviour OF module_norm_core_svNormGen IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Register 'randState_0'
  SIGNAL G_randState_0 : unsigned(0 DOWNTO 0);
  -- Register 'randState_1'
  SIGNAL G_randState_1_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_2'
  SIGNAL G_randState_2_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_3'
  SIGNAL G_randState_3_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_4'
  SIGNAL G_randState_4_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_5'
  SIGNAL G_randState_5_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_6'
  SIGNAL G_randState_6_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_7'
  SIGNAL G_randState_7_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_8'
  SIGNAL G_randState_8_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_9'
  SIGNAL G_randState_9_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_10'
  SIGNAL G_randState_10_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_11'
  SIGNAL G_randState_11_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_12'
  SIGNAL G_randState_12_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_13'
  SIGNAL G_randState_13_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_14'
  SIGNAL G_randState_14_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_15'
  SIGNAL G_randState_15_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_16'
  SIGNAL G_randState_16_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_17'
  SIGNAL G_randState_17_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_18'
  SIGNAL G_randState_18_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_19'
  SIGNAL G_randState_19_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_20'
  SIGNAL G_randState_20_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_21'
  SIGNAL G_randState_21_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_22'
  SIGNAL G_randState_22_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_23'
  SIGNAL G_randState_23_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_24'
  SIGNAL G_randState_24_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_25'
  SIGNAL G_randState_25_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_26'
  SIGNAL G_randState_26_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_27'
  SIGNAL G_randState_27_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_28'
  SIGNAL G_randState_28_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_29'
  SIGNAL G_randState_29_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_30'
  SIGNAL G_randState_30_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_31'
  SIGNAL G_randState_31_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_32'
  SIGNAL G_randState_32_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_33'
  SIGNAL G_randState_33_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_34'
  SIGNAL G_randState_34_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_35'
  SIGNAL G_randState_35_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_36'
  SIGNAL G_randState_36_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_37'
  SIGNAL G_randState_37_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_38'
  SIGNAL G_randState_38_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_39'
  SIGNAL G_randState_39_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_40'
  SIGNAL G_randState_40_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_41'
  SIGNAL G_randState_41_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_42'
  SIGNAL G_randState_42_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_43'
  SIGNAL G_randState_43_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_44'
  SIGNAL G_randState_44_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_45'
  SIGNAL G_randState_45_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_46'
  SIGNAL G_randState_46_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_47'
  SIGNAL G_randState_47_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_48'
  SIGNAL G_randState_48_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_49'
  SIGNAL G_randState_49_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_50'
  SIGNAL G_randState_50_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_51'
  SIGNAL G_randState_51_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_52'
  SIGNAL G_randState_52_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_53'
  SIGNAL G_randState_53_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_54'
  SIGNAL G_randState_54_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_55'
  SIGNAL G_randState_55_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_56'
  SIGNAL G_randState_56_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_57'
  SIGNAL G_randState_57_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_58'
  SIGNAL G_randState_58_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_59'
  SIGNAL G_randState_59_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_60'
  SIGNAL G_randState_60_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_61'
  SIGNAL G_randState_61_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_62'
  SIGNAL G_randState_62_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_63'
  SIGNAL G_randState_63_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_64'
  SIGNAL G_randState_64_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_65'
  SIGNAL G_randState_65_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_66'
  SIGNAL G_randState_66_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_67'
  SIGNAL G_randState_67_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_68'
  SIGNAL G_randState_68_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_69'
  SIGNAL G_randState_69_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_70'
  SIGNAL G_randState_70_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_71'
  SIGNAL G_randState_71_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_72'
  SIGNAL G_randState_72_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_73'
  SIGNAL G_randState_73_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_74'
  SIGNAL G_randState_74_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_75'
  SIGNAL G_randState_75_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_76'
  SIGNAL G_randState_76_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_77'
  SIGNAL G_randState_77_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_78'
  SIGNAL G_randState_78_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_79'
  SIGNAL G_randState_79_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_80'
  SIGNAL G_randState_80_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_81'
  SIGNAL G_randState_81_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_82'
  SIGNAL G_randState_82_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_83'
  SIGNAL G_randState_83_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_84'
  SIGNAL G_randState_84_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_85'
  SIGNAL G_randState_85_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_86'
  SIGNAL G_randState_86_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_87'
  SIGNAL G_randState_87_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_88'
  SIGNAL G_randState_88_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_89'
  SIGNAL G_randState_89_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_90'
  SIGNAL G_randState_90_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_91'
  SIGNAL G_randState_91_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_92'
  SIGNAL G_randState_92_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_93'
  SIGNAL G_randState_93_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_94'
  SIGNAL G_randState_94_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_95'
  SIGNAL G_randState_95_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_96'
  SIGNAL G_randState_96_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_97'
  SIGNAL G_randState_97_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_98'
  SIGNAL G_randState_98_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_99'
  SIGNAL G_randState_99_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_100'
  SIGNAL G_randState_100_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_101'
  SIGNAL G_randState_101_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_102'
  SIGNAL G_randState_102_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_103'
  SIGNAL G_randState_103_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_104'
  SIGNAL G_randState_104_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_105'
  SIGNAL G_randState_105_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_106'
  SIGNAL G_randState_106_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_107'
  SIGNAL G_randState_107_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_108'
  SIGNAL G_randState_108_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_109'
  SIGNAL G_randState_109_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_110'
  SIGNAL G_randState_110_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_111'
  SIGNAL G_randState_111_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_112'
  SIGNAL G_randState_112_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_113'
  SIGNAL G_randState_113_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_114'
  SIGNAL G_randState_114_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_115'
  SIGNAL G_randState_115_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_116'
  SIGNAL G_randState_116_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_117'
  SIGNAL G_randState_117_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_118'
  SIGNAL G_randState_118_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_119'
  SIGNAL G_randState_119_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_120'
  SIGNAL G_randState_120_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_121'
  SIGNAL G_randState_121_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_122'
  SIGNAL G_randState_122_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_123'
  SIGNAL G_randState_123_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_124'
  SIGNAL G_randState_124_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_125'
  SIGNAL G_randState_125_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_126'
  SIGNAL G_randState_126_1 : unsigned(0 DOWNTO 0);
  -- Register 'randState_127'
  SIGNAL G_randState_127_1 : unsigned(0 DOWNTO 0);
  -- Register 'randVal'
  SIGNAL G_randVal : unsigned(127 DOWNTO 0);
  -- Control path join
  SIGNAL G_CForkIn : std_logic;
  -- global connection
  SIGNAL G_randState_1 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_2 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_3 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_4 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_5 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_6 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_7 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_8 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_9 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_10 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_11 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_12 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_13 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_14 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_15 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_16 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_17 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_18 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_19 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_20 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_21 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_22 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_23 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_24 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_25 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_26 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_27 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_28 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_29 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_30 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_31 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_32 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_33 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_34 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_35 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_36 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_37 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_38 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_39 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_40 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_41 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_42 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_43 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_44 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_45 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_46 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_47 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_48 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_49 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_50 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_51 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_52 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_53 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_54 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_55 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_56 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_57 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_58 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_59 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_60 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_61 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_62 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_63 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_64 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_65 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_66 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_67 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_68 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_69 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_70 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_71 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_72 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_73 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_74 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_75 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_76 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_77 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_78 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_79 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_80 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_81 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_82 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_83 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_84 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_85 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_86 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_87 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_88 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_89 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_90 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_91 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_92 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_93 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_94 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_95 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_96 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_97 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_98 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_99 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_100 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_101 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_102 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_103 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_104 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_105 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_106 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_107 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_108 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_109 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_110 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_111 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_112 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_113 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_114 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_115 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_116 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_117 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_118 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_119 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_120 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_121 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_122 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_123 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_124 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_125 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_126 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_randState_127 : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_loadValueDel : unsigned(0 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_11 : unsigned(127 DOWNTO 0);
  -- global connection
  SIGNAL G_Z_Dones_1 : std_logic;
  -- global connection
  SIGNAL G_BinOpOut : unsigned(23 DOWNTO 0);
  -- Global constant
  CONSTANT C_0 : unsigned(35 DOWNTO 0) := (OTHERS => '0');
  -- Global constant
  CONSTANT C_1 : unsigned(4 DOWNTO 0) := "11111";
  -- Global constant
  CONSTANT C_2 : unsigned(0 DOWNTO 0) := "1";
  -- Global constant
  CONSTANT C_3 : unsigned(35 DOWNTO 0) := (OTHERS => '0');
  -- Global constant
  CONSTANT C_4 : unsigned(4 DOWNTO 0) := "11111";
  -- Global constant
  CONSTANT C_5 : unsigned(0 DOWNTO 0) := "1";

  -- Component declaration
  COMPONENT module_norm_core_Gen128
  PORT (
    G_BinOpOut_11_out : OUT unsigned(127 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic;
    G_leb : IN unsigned(0 DOWNTO 0);
    G_lev : IN unsigned(0 DOWNTO 0);
    G_loadValueDel_out : OUT unsigned(0 DOWNTO 0);
    G_randState_0 : IN unsigned(0 DOWNTO 0);
    G_randState_100_1 : IN unsigned(0 DOWNTO 0);
    G_randState_100_out : OUT unsigned(0 DOWNTO 0);
    G_randState_101_1 : IN unsigned(0 DOWNTO 0);
    G_randState_101_out : OUT unsigned(0 DOWNTO 0);
    G_randState_102_1 : IN unsigned(0 DOWNTO 0);
    G_randState_102_out : OUT unsigned(0 DOWNTO 0);
    G_randState_103_1 : IN unsigned(0 DOWNTO 0);
    G_randState_103_out : OUT unsigned(0 DOWNTO 0);
    G_randState_104_1 : IN unsigned(0 DOWNTO 0);
    G_randState_104_out : OUT unsigned(0 DOWNTO 0);
    G_randState_105_1 : IN unsigned(0 DOWNTO 0);
    G_randState_105_out : OUT unsigned(0 DOWNTO 0);
    G_randState_106_1 : IN unsigned(0 DOWNTO 0);
    G_randState_106_out : OUT unsigned(0 DOWNTO 0);
    G_randState_107_1 : IN unsigned(0 DOWNTO 0);
    G_randState_107_out : OUT unsigned(0 DOWNTO 0);
    G_randState_108_1 : IN unsigned(0 DOWNTO 0);
    G_randState_108_out : OUT unsigned(0 DOWNTO 0);
    G_randState_109_1 : IN unsigned(0 DOWNTO 0);
    G_randState_109_out : OUT unsigned(0 DOWNTO 0);
    G_randState_10_1 : IN unsigned(0 DOWNTO 0);
    G_randState_10_out : OUT unsigned(0 DOWNTO 0);
    G_randState_110_1 : IN unsigned(0 DOWNTO 0);
    G_randState_110_out : OUT unsigned(0 DOWNTO 0);
    G_randState_111_1 : IN unsigned(0 DOWNTO 0);
    G_randState_111_out : OUT unsigned(0 DOWNTO 0);
    G_randState_112_1 : IN unsigned(0 DOWNTO 0);
    G_randState_112_out : OUT unsigned(0 DOWNTO 0);
    G_randState_113_1 : IN unsigned(0 DOWNTO 0);
    G_randState_113_out : OUT unsigned(0 DOWNTO 0);
    G_randState_114_1 : IN unsigned(0 DOWNTO 0);
    G_randState_114_out : OUT unsigned(0 DOWNTO 0);
    G_randState_115_1 : IN unsigned(0 DOWNTO 0);
    G_randState_115_out : OUT unsigned(0 DOWNTO 0);
    G_randState_116_1 : IN unsigned(0 DOWNTO 0);
    G_randState_116_out : OUT unsigned(0 DOWNTO 0);
    G_randState_117_1 : IN unsigned(0 DOWNTO 0);
    G_randState_117_out : OUT unsigned(0 DOWNTO 0);
    G_randState_118_1 : IN unsigned(0 DOWNTO 0);
    G_randState_118_out : OUT unsigned(0 DOWNTO 0);
    G_randState_119_1 : IN unsigned(0 DOWNTO 0);
    G_randState_119_out : OUT unsigned(0 DOWNTO 0);
    G_randState_11_1 : IN unsigned(0 DOWNTO 0);
    G_randState_11_out : OUT unsigned(0 DOWNTO 0);
    G_randState_120_1 : IN unsigned(0 DOWNTO 0);
    G_randState_120_out : OUT unsigned(0 DOWNTO 0);
    G_randState_121_1 : IN unsigned(0 DOWNTO 0);
    G_randState_121_out : OUT unsigned(0 DOWNTO 0);
    G_randState_122_1 : IN unsigned(0 DOWNTO 0);
    G_randState_122_out : OUT unsigned(0 DOWNTO 0);
    G_randState_123_1 : IN unsigned(0 DOWNTO 0);
    G_randState_123_out : OUT unsigned(0 DOWNTO 0);
    G_randState_124_1 : IN unsigned(0 DOWNTO 0);
    G_randState_124_out : OUT unsigned(0 DOWNTO 0);
    G_randState_125_1 : IN unsigned(0 DOWNTO 0);
    G_randState_125_out : OUT unsigned(0 DOWNTO 0);
    G_randState_126_1 : IN unsigned(0 DOWNTO 0);
    G_randState_126_out : OUT unsigned(0 DOWNTO 0);
    G_randState_127_1 : IN unsigned(0 DOWNTO 0);
    G_randState_127_out : OUT unsigned(0 DOWNTO 0);
    G_randState_12_1 : IN unsigned(0 DOWNTO 0);
    G_randState_12_out : OUT unsigned(0 DOWNTO 0);
    G_randState_13_1 : IN unsigned(0 DOWNTO 0);
    G_randState_13_out : OUT unsigned(0 DOWNTO 0);
    G_randState_14_1 : IN unsigned(0 DOWNTO 0);
    G_randState_14_out : OUT unsigned(0 DOWNTO 0);
    G_randState_15_1 : IN unsigned(0 DOWNTO 0);
    G_randState_15_out : OUT unsigned(0 DOWNTO 0);
    G_randState_16_1 : IN unsigned(0 DOWNTO 0);
    G_randState_16_out : OUT unsigned(0 DOWNTO 0);
    G_randState_17_1 : IN unsigned(0 DOWNTO 0);
    G_randState_17_out : OUT unsigned(0 DOWNTO 0);
    G_randState_18_1 : IN unsigned(0 DOWNTO 0);
    G_randState_18_out : OUT unsigned(0 DOWNTO 0);
    G_randState_19_1 : IN unsigned(0 DOWNTO 0);
    G_randState_19_out : OUT unsigned(0 DOWNTO 0);
    G_randState_1_1 : IN unsigned(0 DOWNTO 0);
    G_randState_1_out : OUT unsigned(0 DOWNTO 0);
    G_randState_20_1 : IN unsigned(0 DOWNTO 0);
    G_randState_20_out : OUT unsigned(0 DOWNTO 0);
    G_randState_21_1 : IN unsigned(0 DOWNTO 0);
    G_randState_21_out : OUT unsigned(0 DOWNTO 0);
    G_randState_22_1 : IN unsigned(0 DOWNTO 0);
    G_randState_22_out : OUT unsigned(0 DOWNTO 0);
    G_randState_23_1 : IN unsigned(0 DOWNTO 0);
    G_randState_23_out : OUT unsigned(0 DOWNTO 0);
    G_randState_24_1 : IN unsigned(0 DOWNTO 0);
    G_randState_24_out : OUT unsigned(0 DOWNTO 0);
    G_randState_25_1 : IN unsigned(0 DOWNTO 0);
    G_randState_25_out : OUT unsigned(0 DOWNTO 0);
    G_randState_26_1 : IN unsigned(0 DOWNTO 0);
    G_randState_26_out : OUT unsigned(0 DOWNTO 0);
    G_randState_27_1 : IN unsigned(0 DOWNTO 0);
    G_randState_27_out : OUT unsigned(0 DOWNTO 0);
    G_randState_28_1 : IN unsigned(0 DOWNTO 0);
    G_randState_28_out : OUT unsigned(0 DOWNTO 0);
    G_randState_29_1 : IN unsigned(0 DOWNTO 0);
    G_randState_29_out : OUT unsigned(0 DOWNTO 0);
    G_randState_2_1 : IN unsigned(0 DOWNTO 0);
    G_randState_2_out : OUT unsigned(0 DOWNTO 0);
    G_randState_30_1 : IN unsigned(0 DOWNTO 0);
    G_randState_30_out : OUT unsigned(0 DOWNTO 0);
    G_randState_31_1 : IN unsigned(0 DOWNTO 0);
    G_randState_31_out : OUT unsigned(0 DOWNTO 0);
    G_randState_32_1 : IN unsigned(0 DOWNTO 0);
    G_randState_32_out : OUT unsigned(0 DOWNTO 0);
    G_randState_33_1 : IN unsigned(0 DOWNTO 0);
    G_randState_33_out : OUT unsigned(0 DOWNTO 0);
    G_randState_34_1 : IN unsigned(0 DOWNTO 0);
    G_randState_34_out : OUT unsigned(0 DOWNTO 0);
    G_randState_35_1 : IN unsigned(0 DOWNTO 0);
    G_randState_35_out : OUT unsigned(0 DOWNTO 0);
    G_randState_36_1 : IN unsigned(0 DOWNTO 0);
    G_randState_36_out : OUT unsigned(0 DOWNTO 0);
    G_randState_37_1 : IN unsigned(0 DOWNTO 0);
    G_randState_37_out : OUT unsigned(0 DOWNTO 0);
    G_randState_38_1 : IN unsigned(0 DOWNTO 0);
    G_randState_38_out : OUT unsigned(0 DOWNTO 0);
    G_randState_39_1 : IN unsigned(0 DOWNTO 0);
    G_randState_39_out : OUT unsigned(0 DOWNTO 0);
    G_randState_3_1 : IN unsigned(0 DOWNTO 0);
    G_randState_3_out : OUT unsigned(0 DOWNTO 0);
    G_randState_40_1 : IN unsigned(0 DOWNTO 0);
    G_randState_40_out : OUT unsigned(0 DOWNTO 0);
    G_randState_41_1 : IN unsigned(0 DOWNTO 0);
    G_randState_41_out : OUT unsigned(0 DOWNTO 0);
    G_randState_42_1 : IN unsigned(0 DOWNTO 0);
    G_randState_42_out : OUT unsigned(0 DOWNTO 0);
    G_randState_43_1 : IN unsigned(0 DOWNTO 0);
    G_randState_43_out : OUT unsigned(0 DOWNTO 0);
    G_randState_44_1 : IN unsigned(0 DOWNTO 0);
    G_randState_44_out : OUT unsigned(0 DOWNTO 0);
    G_randState_45_1 : IN unsigned(0 DOWNTO 0);
    G_randState_45_out : OUT unsigned(0 DOWNTO 0);
    G_randState_46_1 : IN unsigned(0 DOWNTO 0);
    G_randState_46_out : OUT unsigned(0 DOWNTO 0);
    G_randState_47_1 : IN unsigned(0 DOWNTO 0);
    G_randState_47_out : OUT unsigned(0 DOWNTO 0);
    G_randState_48_1 : IN unsigned(0 DOWNTO 0);
    G_randState_48_out : OUT unsigned(0 DOWNTO 0);
    G_randState_49_1 : IN unsigned(0 DOWNTO 0);
    G_randState_49_out : OUT unsigned(0 DOWNTO 0);
    G_randState_4_1 : IN unsigned(0 DOWNTO 0);
    G_randState_4_out : OUT unsigned(0 DOWNTO 0);
    G_randState_50_1 : IN unsigned(0 DOWNTO 0);
    G_randState_50_out : OUT unsigned(0 DOWNTO 0);
    G_randState_51_1 : IN unsigned(0 DOWNTO 0);
    G_randState_51_out : OUT unsigned(0 DOWNTO 0);
    G_randState_52_1 : IN unsigned(0 DOWNTO 0);
    G_randState_52_out : OUT unsigned(0 DOWNTO 0);
    G_randState_53_1 : IN unsigned(0 DOWNTO 0);
    G_randState_53_out : OUT unsigned(0 DOWNTO 0);
    G_randState_54_1 : IN unsigned(0 DOWNTO 0);
    G_randState_54_out : OUT unsigned(0 DOWNTO 0);
    G_randState_55_1 : IN unsigned(0 DOWNTO 0);
    G_randState_55_out : OUT unsigned(0 DOWNTO 0);
    G_randState_56_1 : IN unsigned(0 DOWNTO 0);
    G_randState_56_out : OUT unsigned(0 DOWNTO 0);
    G_randState_57_1 : IN unsigned(0 DOWNTO 0);
    G_randState_57_out : OUT unsigned(0 DOWNTO 0);
    G_randState_58_1 : IN unsigned(0 DOWNTO 0);
    G_randState_58_out : OUT unsigned(0 DOWNTO 0);
    G_randState_59_1 : IN unsigned(0 DOWNTO 0);
    G_randState_59_out : OUT unsigned(0 DOWNTO 0);
    G_randState_5_1 : IN unsigned(0 DOWNTO 0);
    G_randState_5_out : OUT unsigned(0 DOWNTO 0);
    G_randState_60_1 : IN unsigned(0 DOWNTO 0);
    G_randState_60_out : OUT unsigned(0 DOWNTO 0);
    G_randState_61_1 : IN unsigned(0 DOWNTO 0);
    G_randState_61_out : OUT unsigned(0 DOWNTO 0);
    G_randState_62_1 : IN unsigned(0 DOWNTO 0);
    G_randState_62_out : OUT unsigned(0 DOWNTO 0);
    G_randState_63_1 : IN unsigned(0 DOWNTO 0);
    G_randState_63_out : OUT unsigned(0 DOWNTO 0);
    G_randState_64_1 : IN unsigned(0 DOWNTO 0);
    G_randState_64_out : OUT unsigned(0 DOWNTO 0);
    G_randState_65_1 : IN unsigned(0 DOWNTO 0);
    G_randState_65_out : OUT unsigned(0 DOWNTO 0);
    G_randState_66_1 : IN unsigned(0 DOWNTO 0);
    G_randState_66_out : OUT unsigned(0 DOWNTO 0);
    G_randState_67_1 : IN unsigned(0 DOWNTO 0);
    G_randState_67_out : OUT unsigned(0 DOWNTO 0);
    G_randState_68_1 : IN unsigned(0 DOWNTO 0);
    G_randState_68_out : OUT unsigned(0 DOWNTO 0);
    G_randState_69_1 : IN unsigned(0 DOWNTO 0);
    G_randState_69_out : OUT unsigned(0 DOWNTO 0);
    G_randState_6_1 : IN unsigned(0 DOWNTO 0);
    G_randState_6_out : OUT unsigned(0 DOWNTO 0);
    G_randState_70_1 : IN unsigned(0 DOWNTO 0);
    G_randState_70_out : OUT unsigned(0 DOWNTO 0);
    G_randState_71_1 : IN unsigned(0 DOWNTO 0);
    G_randState_71_out : OUT unsigned(0 DOWNTO 0);
    G_randState_72_1 : IN unsigned(0 DOWNTO 0);
    G_randState_72_out : OUT unsigned(0 DOWNTO 0);
    G_randState_73_1 : IN unsigned(0 DOWNTO 0);
    G_randState_73_out : OUT unsigned(0 DOWNTO 0);
    G_randState_74_1 : IN unsigned(0 DOWNTO 0);
    G_randState_74_out : OUT unsigned(0 DOWNTO 0);
    G_randState_75_1 : IN unsigned(0 DOWNTO 0);
    G_randState_75_out : OUT unsigned(0 DOWNTO 0);
    G_randState_76_1 : IN unsigned(0 DOWNTO 0);
    G_randState_76_out : OUT unsigned(0 DOWNTO 0);
    G_randState_77_1 : IN unsigned(0 DOWNTO 0);
    G_randState_77_out : OUT unsigned(0 DOWNTO 0);
    G_randState_78_1 : IN unsigned(0 DOWNTO 0);
    G_randState_78_out : OUT unsigned(0 DOWNTO 0);
    G_randState_79_1 : IN unsigned(0 DOWNTO 0);
    G_randState_79_out : OUT unsigned(0 DOWNTO 0);
    G_randState_7_1 : IN unsigned(0 DOWNTO 0);
    G_randState_7_out : OUT unsigned(0 DOWNTO 0);
    G_randState_80_1 : IN unsigned(0 DOWNTO 0);
    G_randState_80_out : OUT unsigned(0 DOWNTO 0);
    G_randState_81_1 : IN unsigned(0 DOWNTO 0);
    G_randState_81_out : OUT unsigned(0 DOWNTO 0);
    G_randState_82_1 : IN unsigned(0 DOWNTO 0);
    G_randState_82_out : OUT unsigned(0 DOWNTO 0);
    G_randState_83_1 : IN unsigned(0 DOWNTO 0);
    G_randState_83_out : OUT unsigned(0 DOWNTO 0);
    G_randState_84_1 : IN unsigned(0 DOWNTO 0);
    G_randState_84_out : OUT unsigned(0 DOWNTO 0);
    G_randState_85_1 : IN unsigned(0 DOWNTO 0);
    G_randState_85_out : OUT unsigned(0 DOWNTO 0);
    G_randState_86_1 : IN unsigned(0 DOWNTO 0);
    G_randState_86_out : OUT unsigned(0 DOWNTO 0);
    G_randState_87_1 : IN unsigned(0 DOWNTO 0);
    G_randState_87_out : OUT unsigned(0 DOWNTO 0);
    G_randState_88_1 : IN unsigned(0 DOWNTO 0);
    G_randState_88_out : OUT unsigned(0 DOWNTO 0);
    G_randState_89_1 : IN unsigned(0 DOWNTO 0);
    G_randState_89_out : OUT unsigned(0 DOWNTO 0);
    G_randState_8_1 : IN unsigned(0 DOWNTO 0);
    G_randState_8_out : OUT unsigned(0 DOWNTO 0);
    G_randState_90_1 : IN unsigned(0 DOWNTO 0);
    G_randState_90_out : OUT unsigned(0 DOWNTO 0);
    G_randState_91_1 : IN unsigned(0 DOWNTO 0);
    G_randState_91_out : OUT unsigned(0 DOWNTO 0);
    G_randState_92_1 : IN unsigned(0 DOWNTO 0);
    G_randState_92_out : OUT unsigned(0 DOWNTO 0);
    G_randState_93_1 : IN unsigned(0 DOWNTO 0);
    G_randState_93_out : OUT unsigned(0 DOWNTO 0);
    G_randState_94_1 : IN unsigned(0 DOWNTO 0);
    G_randState_94_out : OUT unsigned(0 DOWNTO 0);
    G_randState_95_1 : IN unsigned(0 DOWNTO 0);
    G_randState_95_out : OUT unsigned(0 DOWNTO 0);
    G_randState_96_1 : IN unsigned(0 DOWNTO 0);
    G_randState_96_out : OUT unsigned(0 DOWNTO 0);
    G_randState_97_1 : IN unsigned(0 DOWNTO 0);
    G_randState_97_out : OUT unsigned(0 DOWNTO 0);
    G_randState_98_1 : IN unsigned(0 DOWNTO 0);
    G_randState_98_out : OUT unsigned(0 DOWNTO 0);
    G_randState_99_1 : IN unsigned(0 DOWNTO 0);
    G_randState_99_out : OUT unsigned(0 DOWNTO 0);
    G_randState_9_1 : IN unsigned(0 DOWNTO 0);
    G_randState_9_out : OUT unsigned(0 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_ww_pxSample
  PORT (
    G_BinOpOut_out : OUT unsigned(23 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic;
    G_Z_Dones_1_out : OUT std_logic;
    G_randVal : IN unsigned(127 DOWNTO 0);
    iReset : IN std_logic
  );
  END COMPONENT;

BEGIN

  -- Processes:

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'randState_127'
      IF ( G_CForkIn='1' ) THEN
        G_randState_127_1 <= G_loadValueDel;
      END IF;

      -- Update of register 'randState_126'
      IF ( G_CForkIn='1' ) THEN
        G_randState_126_1 <= G_randState_127;
      END IF;

      -- Update of register 'randState_125'
      IF ( G_CForkIn='1' ) THEN
        G_randState_125_1 <= G_randState_126;
      END IF;

      -- Update of register 'randState_124'
      IF ( G_CForkIn='1' ) THEN
        G_randState_124_1 <= G_randState_125;
      END IF;

      -- Update of register 'randState_123'
      IF ( G_CForkIn='1' ) THEN
        G_randState_123_1 <= G_randState_124;
      END IF;

      -- Update of register 'randState_122'
      IF ( G_CForkIn='1' ) THEN
        G_randState_122_1 <= G_randState_123;
      END IF;

      -- Update of register 'randState_121'
      IF ( G_CForkIn='1' ) THEN
        G_randState_121_1 <= G_randState_122;
      END IF;

      -- Update of register 'randState_120'
      IF ( G_CForkIn='1' ) THEN
        G_randState_120_1 <= G_randState_121;
      END IF;

      -- Update of register 'randState_119'
      IF ( G_CForkIn='1' ) THEN
        G_randState_119_1 <= G_randState_120;
      END IF;

      -- Update of register 'randState_118'
      IF ( G_CForkIn='1' ) THEN
        G_randState_118_1 <= G_randState_119;
      END IF;

      -- Update of register 'randState_117'
      IF ( G_CForkIn='1' ) THEN
        G_randState_117_1 <= G_randState_118;
      END IF;

      -- Update of register 'randState_116'
      IF ( G_CForkIn='1' ) THEN
        G_randState_116_1 <= G_randState_117;
      END IF;

      -- Update of register 'randState_115'
      IF ( G_CForkIn='1' ) THEN
        G_randState_115_1 <= G_randState_116;
      END IF;

      -- Update of register 'randState_114'
      IF ( G_CForkIn='1' ) THEN
        G_randState_114_1 <= G_randState_115;
      END IF;

      -- Update of register 'randState_113'
      IF ( G_CForkIn='1' ) THEN
        G_randState_113_1 <= G_randState_114;
      END IF;

      -- Update of register 'randState_112'
      IF ( G_CForkIn='1' ) THEN
        G_randState_112_1 <= G_randState_113;
      END IF;

      -- Update of register 'randState_111'
      IF ( G_CForkIn='1' ) THEN
        G_randState_111_1 <= G_randState_112;
      END IF;

      -- Update of register 'randState_110'
      IF ( G_CForkIn='1' ) THEN
        G_randState_110_1 <= G_randState_111;
      END IF;

      -- Update of register 'randState_109'
      IF ( G_CForkIn='1' ) THEN
        G_randState_109_1 <= G_randState_110;
      END IF;

      -- Update of register 'randState_108'
      IF ( G_CForkIn='1' ) THEN
        G_randState_108_1 <= G_randState_109;
      END IF;

      -- Update of register 'randState_107'
      IF ( G_CForkIn='1' ) THEN
        G_randState_107_1 <= G_randState_108;
      END IF;

      -- Update of register 'randState_106'
      IF ( G_CForkIn='1' ) THEN
        G_randState_106_1 <= G_randState_107;
      END IF;

      -- Update of register 'randState_105'
      IF ( G_CForkIn='1' ) THEN
        G_randState_105_1 <= G_randState_106;
      END IF;

      -- Update of register 'randState_104'
      IF ( G_CForkIn='1' ) THEN
        G_randState_104_1 <= G_randState_105;
      END IF;

      -- Update of register 'randState_103'
      IF ( G_CForkIn='1' ) THEN
        G_randState_103_1 <= G_randState_104;
      END IF;

      -- Update of register 'randState_102'
      IF ( G_CForkIn='1' ) THEN
        G_randState_102_1 <= G_randState_103;
      END IF;

      -- Update of register 'randState_101'
      IF ( G_CForkIn='1' ) THEN
        G_randState_101_1 <= G_randState_102;
      END IF;

      -- Update of register 'randState_100'
      IF ( G_CForkIn='1' ) THEN
        G_randState_100_1 <= G_randState_101;
      END IF;

      -- Update of register 'randState_99'
      IF ( G_CForkIn='1' ) THEN
        G_randState_99_1 <= G_randState_100;
      END IF;

      -- Update of register 'randState_98'
      IF ( G_CForkIn='1' ) THEN
        G_randState_98_1 <= G_randState_99;
      END IF;

      -- Update of register 'randState_97'
      IF ( G_CForkIn='1' ) THEN
        G_randState_97_1 <= G_randState_98;
      END IF;

      -- Update of register 'randState_96'
      IF ( G_CForkIn='1' ) THEN
        G_randState_96_1 <= G_randState_97;
      END IF;

      -- Update of register 'randState_95'
      IF ( G_CForkIn='1' ) THEN
        G_randState_95_1 <= G_randState_96;
      END IF;

      -- Update of register 'randState_94'
      IF ( G_CForkIn='1' ) THEN
        G_randState_94_1 <= G_randState_95;
      END IF;

      -- Update of register 'randState_93'
      IF ( G_CForkIn='1' ) THEN
        G_randState_93_1 <= G_randState_94;
      END IF;

      -- Update of register 'randState_92'
      IF ( G_CForkIn='1' ) THEN
        G_randState_92_1 <= G_randState_93;
      END IF;

      -- Update of register 'randState_91'
      IF ( G_CForkIn='1' ) THEN
        G_randState_91_1 <= G_randState_92;
      END IF;

      -- Update of register 'randState_90'
      IF ( G_CForkIn='1' ) THEN
        G_randState_90_1 <= G_randState_91;
      END IF;

      -- Update of register 'randState_89'
      IF ( G_CForkIn='1' ) THEN
        G_randState_89_1 <= G_randState_90;
      END IF;

      -- Update of register 'randState_88'
      IF ( G_CForkIn='1' ) THEN
        G_randState_88_1 <= G_randState_89;
      END IF;

      -- Update of register 'randState_87'
      IF ( G_CForkIn='1' ) THEN
        G_randState_87_1 <= G_randState_88;
      END IF;

      -- Update of register 'randState_86'
      IF ( G_CForkIn='1' ) THEN
        G_randState_86_1 <= G_randState_87;
      END IF;

      -- Update of register 'randState_85'
      IF ( G_CForkIn='1' ) THEN
        G_randState_85_1 <= G_randState_86;
      END IF;

      -- Update of register 'randState_84'
      IF ( G_CForkIn='1' ) THEN
        G_randState_84_1 <= G_randState_85;
      END IF;

      -- Update of register 'randState_83'
      IF ( G_CForkIn='1' ) THEN
        G_randState_83_1 <= G_randState_84;
      END IF;

      -- Update of register 'randState_82'
      IF ( G_CForkIn='1' ) THEN
        G_randState_82_1 <= G_randState_83;
      END IF;

      -- Update of register 'randState_81'
      IF ( G_CForkIn='1' ) THEN
        G_randState_81_1 <= G_randState_82;
      END IF;

      -- Update of register 'randState_80'
      IF ( G_CForkIn='1' ) THEN
        G_randState_80_1 <= G_randState_81;
      END IF;

      -- Update of register 'randState_79'
      IF ( G_CForkIn='1' ) THEN
        G_randState_79_1 <= G_randState_80;
      END IF;

      -- Update of register 'randState_78'
      IF ( G_CForkIn='1' ) THEN
        G_randState_78_1 <= G_randState_79;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'randState_77'
      IF ( G_CForkIn='1' ) THEN
        G_randState_77_1 <= G_randState_78;
      END IF;

      -- Update of register 'randState_76'
      IF ( G_CForkIn='1' ) THEN
        G_randState_76_1 <= G_randState_77;
      END IF;

      -- Update of register 'randState_75'
      IF ( G_CForkIn='1' ) THEN
        G_randState_75_1 <= G_randState_76;
      END IF;

      -- Update of register 'randState_74'
      IF ( G_CForkIn='1' ) THEN
        G_randState_74_1 <= G_randState_75;
      END IF;

      -- Update of register 'randState_73'
      IF ( G_CForkIn='1' ) THEN
        G_randState_73_1 <= G_randState_74;
      END IF;

      -- Update of register 'randState_72'
      IF ( G_CForkIn='1' ) THEN
        G_randState_72_1 <= G_randState_73;
      END IF;

      -- Update of register 'randState_71'
      IF ( G_CForkIn='1' ) THEN
        G_randState_71_1 <= G_randState_72;
      END IF;

      -- Update of register 'randState_70'
      IF ( G_CForkIn='1' ) THEN
        G_randState_70_1 <= G_randState_71;
      END IF;

      -- Update of register 'randState_69'
      IF ( G_CForkIn='1' ) THEN
        G_randState_69_1 <= G_randState_70;
      END IF;

      -- Update of register 'randState_68'
      IF ( G_CForkIn='1' ) THEN
        G_randState_68_1 <= G_randState_69;
      END IF;

      -- Update of register 'randState_67'
      IF ( G_CForkIn='1' ) THEN
        G_randState_67_1 <= G_randState_68;
      END IF;

      -- Update of register 'randState_66'
      IF ( G_CForkIn='1' ) THEN
        G_randState_66_1 <= G_randState_67;
      END IF;

      -- Update of register 'randState_65'
      IF ( G_CForkIn='1' ) THEN
        G_randState_65_1 <= G_randState_66;
      END IF;

      -- Update of register 'randState_64'
      IF ( G_CForkIn='1' ) THEN
        G_randState_64_1 <= G_randState_65;
      END IF;

      -- Update of register 'randState_63'
      IF ( G_CForkIn='1' ) THEN
        G_randState_63_1 <= G_randState_64;
      END IF;

      -- Update of register 'randState_62'
      IF ( G_CForkIn='1' ) THEN
        G_randState_62_1 <= G_randState_63;
      END IF;

      -- Update of register 'randState_61'
      IF ( G_CForkIn='1' ) THEN
        G_randState_61_1 <= G_randState_62;
      END IF;

      -- Update of register 'randState_60'
      IF ( G_CForkIn='1' ) THEN
        G_randState_60_1 <= G_randState_61;
      END IF;

      -- Update of register 'randState_59'
      IF ( G_CForkIn='1' ) THEN
        G_randState_59_1 <= G_randState_60;
      END IF;

      -- Update of register 'randState_58'
      IF ( G_CForkIn='1' ) THEN
        G_randState_58_1 <= G_randState_59;
      END IF;

      -- Update of register 'randState_57'
      IF ( G_CForkIn='1' ) THEN
        G_randState_57_1 <= G_randState_58;
      END IF;

      -- Update of register 'randState_56'
      IF ( G_CForkIn='1' ) THEN
        G_randState_56_1 <= G_randState_57;
      END IF;

      -- Update of register 'randState_55'
      IF ( G_CForkIn='1' ) THEN
        G_randState_55_1 <= G_randState_56;
      END IF;

      -- Update of register 'randState_54'
      IF ( G_CForkIn='1' ) THEN
        G_randState_54_1 <= G_randState_55;
      END IF;

      -- Update of register 'randState_53'
      IF ( G_CForkIn='1' ) THEN
        G_randState_53_1 <= G_randState_54;
      END IF;

      -- Update of register 'randState_52'
      IF ( G_CForkIn='1' ) THEN
        G_randState_52_1 <= G_randState_53;
      END IF;

      -- Update of register 'randState_51'
      IF ( G_CForkIn='1' ) THEN
        G_randState_51_1 <= G_randState_52;
      END IF;

      -- Update of register 'randState_50'
      IF ( G_CForkIn='1' ) THEN
        G_randState_50_1 <= G_randState_51;
      END IF;

      -- Update of register 'randState_49'
      IF ( G_CForkIn='1' ) THEN
        G_randState_49_1 <= G_randState_50;
      END IF;

      -- Update of register 'randState_48'
      IF ( G_CForkIn='1' ) THEN
        G_randState_48_1 <= G_randState_49;
      END IF;

      -- Update of register 'randState_47'
      IF ( G_CForkIn='1' ) THEN
        G_randState_47_1 <= G_randState_48;
      END IF;

      -- Update of register 'randState_46'
      IF ( G_CForkIn='1' ) THEN
        G_randState_46_1 <= G_randState_47;
      END IF;

      -- Update of register 'randState_45'
      IF ( G_CForkIn='1' ) THEN
        G_randState_45_1 <= G_randState_46;
      END IF;

      -- Update of register 'randState_44'
      IF ( G_CForkIn='1' ) THEN
        G_randState_44_1 <= G_randState_45;
      END IF;

      -- Update of register 'randState_43'
      IF ( G_CForkIn='1' ) THEN
        G_randState_43_1 <= G_randState_44;
      END IF;

      -- Update of register 'randState_42'
      IF ( G_CForkIn='1' ) THEN
        G_randState_42_1 <= G_randState_43;
      END IF;

      -- Update of register 'randState_41'
      IF ( G_CForkIn='1' ) THEN
        G_randState_41_1 <= G_randState_42;
      END IF;

      -- Update of register 'randState_40'
      IF ( G_CForkIn='1' ) THEN
        G_randState_40_1 <= G_randState_41;
      END IF;

      -- Update of register 'randState_39'
      IF ( G_CForkIn='1' ) THEN
        G_randState_39_1 <= G_randState_40;
      END IF;

      -- Update of register 'randState_38'
      IF ( G_CForkIn='1' ) THEN
        G_randState_38_1 <= G_randState_39;
      END IF;

      -- Update of register 'randState_37'
      IF ( G_CForkIn='1' ) THEN
        G_randState_37_1 <= G_randState_38;
      END IF;

      -- Update of register 'randState_36'
      IF ( G_CForkIn='1' ) THEN
        G_randState_36_1 <= G_randState_37;
      END IF;

      -- Update of register 'randState_35'
      IF ( G_CForkIn='1' ) THEN
        G_randState_35_1 <= G_randState_36;
      END IF;

      -- Update of register 'randState_34'
      IF ( G_CForkIn='1' ) THEN
        G_randState_34_1 <= G_randState_35;
      END IF;

      -- Update of register 'randState_33'
      IF ( G_CForkIn='1' ) THEN
        G_randState_33_1 <= G_randState_34;
      END IF;

      -- Update of register 'randState_32'
      IF ( G_CForkIn='1' ) THEN
        G_randState_32_1 <= G_randState_33;
      END IF;

      -- Update of register 'randState_31'
      IF ( G_CForkIn='1' ) THEN
        G_randState_31_1 <= G_randState_32;
      END IF;

      -- Update of register 'randState_30'
      IF ( G_CForkIn='1' ) THEN
        G_randState_30_1 <= G_randState_31;
      END IF;

      -- Update of register 'randState_29'
      IF ( G_CForkIn='1' ) THEN
        G_randState_29_1 <= G_randState_30;
      END IF;

      -- Update of register 'randState_28'
      IF ( G_CForkIn='1' ) THEN
        G_randState_28_1 <= G_randState_29;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'randState_27'
      IF ( G_CForkIn='1' ) THEN
        G_randState_27_1 <= G_randState_28;
      END IF;

      -- Update of register 'randState_26'
      IF ( G_CForkIn='1' ) THEN
        G_randState_26_1 <= G_randState_27;
      END IF;

      -- Update of register 'randState_25'
      IF ( G_CForkIn='1' ) THEN
        G_randState_25_1 <= G_randState_26;
      END IF;

      -- Update of register 'randState_24'
      IF ( G_CForkIn='1' ) THEN
        G_randState_24_1 <= G_randState_25;
      END IF;

      -- Update of register 'randState_23'
      IF ( G_CForkIn='1' ) THEN
        G_randState_23_1 <= G_randState_24;
      END IF;

      -- Update of register 'randState_22'
      IF ( G_CForkIn='1' ) THEN
        G_randState_22_1 <= G_randState_23;
      END IF;

      -- Update of register 'randState_21'
      IF ( G_CForkIn='1' ) THEN
        G_randState_21_1 <= G_randState_22;
      END IF;

      -- Update of register 'randState_20'
      IF ( G_CForkIn='1' ) THEN
        G_randState_20_1 <= G_randState_21;
      END IF;

      -- Update of register 'randState_19'
      IF ( G_CForkIn='1' ) THEN
        G_randState_19_1 <= G_randState_20;
      END IF;

      -- Update of register 'randState_18'
      IF ( G_CForkIn='1' ) THEN
        G_randState_18_1 <= G_randState_19;
      END IF;

      -- Update of register 'randState_17'
      IF ( G_CForkIn='1' ) THEN
        G_randState_17_1 <= G_randState_18;
      END IF;

      -- Update of register 'randState_16'
      IF ( G_CForkIn='1' ) THEN
        G_randState_16_1 <= G_randState_17;
      END IF;

      -- Update of register 'randState_15'
      IF ( G_CForkIn='1' ) THEN
        G_randState_15_1 <= G_randState_16;
      END IF;

      -- Update of register 'randState_14'
      IF ( G_CForkIn='1' ) THEN
        G_randState_14_1 <= G_randState_15;
      END IF;

      -- Update of register 'randVal'
      IF ( G_CForkIn='1' ) THEN
        G_randVal <= G_BinOpOut_11;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      IF ( iReset='1' ) THEN
        G_randState_13_1 <= "0";
        G_randState_12_1 <= "0";
        G_randState_11_1 <= "0";
        G_randState_10_1 <= "1";
        G_randState_9_1 <= "1";
        G_randState_8_1 <= "1";
        G_randState_7_1 <= "0";
        G_randState_6_1 <= "0";
        G_randState_5_1 <= "0";
        G_randState_4_1 <= "1";
        G_randState_3_1 <= "0";
        G_randState_2_1 <= "1";
        G_randState_1_1 <= "0";
        G_randState_0 <= "1";
      ELSE
        -- Update of register 'randState_13'
        IF ( G_CForkIn='1' ) THEN
          G_randState_13_1 <= G_randState_14;
        END IF;

        -- Update of register 'randState_12'
        IF ( G_CForkIn='1' ) THEN
          G_randState_12_1 <= G_randState_13;
        END IF;

        -- Update of register 'randState_11'
        IF ( G_CForkIn='1' ) THEN
          G_randState_11_1 <= G_randState_12;
        END IF;

        -- Update of register 'randState_10'
        IF ( G_CForkIn='1' ) THEN
          G_randState_10_1 <= G_randState_11;
        END IF;

        -- Update of register 'randState_9'
        IF ( G_CForkIn='1' ) THEN
          G_randState_9_1 <= G_randState_10;
        END IF;

        -- Update of register 'randState_8'
        IF ( G_CForkIn='1' ) THEN
          G_randState_8_1 <= G_randState_9;
        END IF;

        -- Update of register 'randState_7'
        IF ( G_CForkIn='1' ) THEN
          G_randState_7_1 <= G_randState_8;
        END IF;

        -- Update of register 'randState_6'
        IF ( G_CForkIn='1' ) THEN
          G_randState_6_1 <= G_randState_7;
        END IF;

        -- Update of register 'randState_5'
        IF ( G_CForkIn='1' ) THEN
          G_randState_5_1 <= G_randState_6;
        END IF;

        -- Update of register 'randState_4'
        IF ( G_CForkIn='1' ) THEN
          G_randState_4_1 <= G_randState_5;
        END IF;

        -- Update of register 'randState_3'
        IF ( G_CForkIn='1' ) THEN
          G_randState_3_1 <= G_randState_4;
        END IF;

        -- Update of register 'randState_2'
        IF ( G_CForkIn='1' ) THEN
          G_randState_2_1 <= G_randState_3;
        END IF;

        -- Update of register 'randState_1'
        IF ( G_CForkIn='1' ) THEN
          G_randState_1_1 <= G_randState_2;
        END IF;

        -- Update of register 'randState_0'
        IF ( G_CForkIn='1' ) THEN
          G_randState_0 <= G_randState_1;
        END IF;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  G_CForkIn <= G_StartOut or G_Z_Dones_1;


  -- Port connections:

  G_BinOpOut_out <= G_BinOpOut;


  -- Component instances:

  -- Instantiation
  I0_module : module_norm_core_ww_pxSample
    PORT MAP (
      G_BinOpOut_out => G_BinOpOut,
      G_CForkIn => G_CForkIn,
      G_S_0 => G_S_0,
      G_Z_Dones_1_out => G_Z_Dones_1,
      G_randVal => G_randVal,
      iReset => iReset
    );

  -- Instantiation
  I1_module : module_norm_core_Gen128
    PORT MAP (
      G_BinOpOut_11_out => G_BinOpOut_11,
      G_CForkIn => G_CForkIn,
      G_S_0 => G_S_0,
      G_leb => G_leb,
      G_lev => G_lev,
      G_loadValueDel_out => G_loadValueDel,
      G_randState_0 => G_randState_0,
      G_randState_100_1 => G_randState_100_1,
      G_randState_100_out => G_randState_100,
      G_randState_101_1 => G_randState_101_1,
      G_randState_101_out => G_randState_101,
      G_randState_102_1 => G_randState_102_1,
      G_randState_102_out => G_randState_102,
      G_randState_103_1 => G_randState_103_1,
      G_randState_103_out => G_randState_103,
      G_randState_104_1 => G_randState_104_1,
      G_randState_104_out => G_randState_104,
      G_randState_105_1 => G_randState_105_1,
      G_randState_105_out => G_randState_105,
      G_randState_106_1 => G_randState_106_1,
      G_randState_106_out => G_randState_106,
      G_randState_107_1 => G_randState_107_1,
      G_randState_107_out => G_randState_107,
      G_randState_108_1 => G_randState_108_1,
      G_randState_108_out => G_randState_108,
      G_randState_109_1 => G_randState_109_1,
      G_randState_109_out => G_randState_109,
      G_randState_10_1 => G_randState_10_1,
      G_randState_10_out => G_randState_10,
      G_randState_110_1 => G_randState_110_1,
      G_randState_110_out => G_randState_110,
      G_randState_111_1 => G_randState_111_1,
      G_randState_111_out => G_randState_111,
      G_randState_112_1 => G_randState_112_1,
      G_randState_112_out => G_randState_112,
      G_randState_113_1 => G_randState_113_1,
      G_randState_113_out => G_randState_113,
      G_randState_114_1 => G_randState_114_1,
      G_randState_114_out => G_randState_114,
      G_randState_115_1 => G_randState_115_1,
      G_randState_115_out => G_randState_115,
      G_randState_116_1 => G_randState_116_1,
      G_randState_116_out => G_randState_116,
      G_randState_117_1 => G_randState_117_1,
      G_randState_117_out => G_randState_117,
      G_randState_118_1 => G_randState_118_1,
      G_randState_118_out => G_randState_118,
      G_randState_119_1 => G_randState_119_1,
      G_randState_119_out => G_randState_119,
      G_randState_11_1 => G_randState_11_1,
      G_randState_11_out => G_randState_11,
      G_randState_120_1 => G_randState_120_1,
      G_randState_120_out => G_randState_120,
      G_randState_121_1 => G_randState_121_1,
      G_randState_121_out => G_randState_121,
      G_randState_122_1 => G_randState_122_1,
      G_randState_122_out => G_randState_122,
      G_randState_123_1 => G_randState_123_1,
      G_randState_123_out => G_randState_123,
      G_randState_124_1 => G_randState_124_1,
      G_randState_124_out => G_randState_124,
      G_randState_125_1 => G_randState_125_1,
      G_randState_125_out => G_randState_125,
      G_randState_126_1 => G_randState_126_1,
      G_randState_126_out => G_randState_126,
      G_randState_127_1 => G_randState_127_1,
      G_randState_127_out => G_randState_127,
      G_randState_12_1 => G_randState_12_1,
      G_randState_12_out => G_randState_12,
      G_randState_13_1 => G_randState_13_1,
      G_randState_13_out => G_randState_13,
      G_randState_14_1 => G_randState_14_1,
      G_randState_14_out => G_randState_14,
      G_randState_15_1 => G_randState_15_1,
      G_randState_15_out => G_randState_15,
      G_randState_16_1 => G_randState_16_1,
      G_randState_16_out => G_randState_16,
      G_randState_17_1 => G_randState_17_1,
      G_randState_17_out => G_randState_17,
      G_randState_18_1 => G_randState_18_1,
      G_randState_18_out => G_randState_18,
      G_randState_19_1 => G_randState_19_1,
      G_randState_19_out => G_randState_19,
      G_randState_1_1 => G_randState_1_1,
      G_randState_1_out => G_randState_1,
      G_randState_20_1 => G_randState_20_1,
      G_randState_20_out => G_randState_20,
      G_randState_21_1 => G_randState_21_1,
      G_randState_21_out => G_randState_21,
      G_randState_22_1 => G_randState_22_1,
      G_randState_22_out => G_randState_22,
      G_randState_23_1 => G_randState_23_1,
      G_randState_23_out => G_randState_23,
      G_randState_24_1 => G_randState_24_1,
      G_randState_24_out => G_randState_24,
      G_randState_25_1 => G_randState_25_1,
      G_randState_25_out => G_randState_25,
      G_randState_26_1 => G_randState_26_1,
      G_randState_26_out => G_randState_26,
      G_randState_27_1 => G_randState_27_1,
      G_randState_27_out => G_randState_27,
      G_randState_28_1 => G_randState_28_1,
      G_randState_28_out => G_randState_28,
      G_randState_29_1 => G_randState_29_1,
      G_randState_29_out => G_randState_29,
      G_randState_2_1 => G_randState_2_1,
      G_randState_2_out => G_randState_2,
      G_randState_30_1 => G_randState_30_1,
      G_randState_30_out => G_randState_30,
      G_randState_31_1 => G_randState_31_1,
      G_randState_31_out => G_randState_31,
      G_randState_32_1 => G_randState_32_1,
      G_randState_32_out => G_randState_32,
      G_randState_33_1 => G_randState_33_1,
      G_randState_33_out => G_randState_33,
      G_randState_34_1 => G_randState_34_1,
      G_randState_34_out => G_randState_34,
      G_randState_35_1 => G_randState_35_1,
      G_randState_35_out => G_randState_35,
      G_randState_36_1 => G_randState_36_1,
      G_randState_36_out => G_randState_36,
      G_randState_37_1 => G_randState_37_1,
      G_randState_37_out => G_randState_37,
      G_randState_38_1 => G_randState_38_1,
      G_randState_38_out => G_randState_38,
      G_randState_39_1 => G_randState_39_1,
      G_randState_39_out => G_randState_39,
      G_randState_3_1 => G_randState_3_1,
      G_randState_3_out => G_randState_3,
      G_randState_40_1 => G_randState_40_1,
      G_randState_40_out => G_randState_40,
      G_randState_41_1 => G_randState_41_1,
      G_randState_41_out => G_randState_41,
      G_randState_42_1 => G_randState_42_1,
      G_randState_42_out => G_randState_42,
      G_randState_43_1 => G_randState_43_1,
      G_randState_43_out => G_randState_43,
      G_randState_44_1 => G_randState_44_1,
      G_randState_44_out => G_randState_44,
      G_randState_45_1 => G_randState_45_1,
      G_randState_45_out => G_randState_45,
      G_randState_46_1 => G_randState_46_1,
      G_randState_46_out => G_randState_46,
      G_randState_47_1 => G_randState_47_1,
      G_randState_47_out => G_randState_47,
      G_randState_48_1 => G_randState_48_1,
      G_randState_48_out => G_randState_48,
      G_randState_49_1 => G_randState_49_1,
      G_randState_49_out => G_randState_49,
      G_randState_4_1 => G_randState_4_1,
      G_randState_4_out => G_randState_4,
      G_randState_50_1 => G_randState_50_1,
      G_randState_50_out => G_randState_50,
      G_randState_51_1 => G_randState_51_1,
      G_randState_51_out => G_randState_51,
      G_randState_52_1 => G_randState_52_1,
      G_randState_52_out => G_randState_52,
      G_randState_53_1 => G_randState_53_1,
      G_randState_53_out => G_randState_53,
      G_randState_54_1 => G_randState_54_1,
      G_randState_54_out => G_randState_54,
      G_randState_55_1 => G_randState_55_1,
      G_randState_55_out => G_randState_55,
      G_randState_56_1 => G_randState_56_1,
      G_randState_56_out => G_randState_56,
      G_randState_57_1 => G_randState_57_1,
      G_randState_57_out => G_randState_57,
      G_randState_58_1 => G_randState_58_1,
      G_randState_58_out => G_randState_58,
      G_randState_59_1 => G_randState_59_1,
      G_randState_59_out => G_randState_59,
      G_randState_5_1 => G_randState_5_1,
      G_randState_5_out => G_randState_5,
      G_randState_60_1 => G_randState_60_1,
      G_randState_60_out => G_randState_60,
      G_randState_61_1 => G_randState_61_1,
      G_randState_61_out => G_randState_61,
      G_randState_62_1 => G_randState_62_1,
      G_randState_62_out => G_randState_62,
      G_randState_63_1 => G_randState_63_1,
      G_randState_63_out => G_randState_63,
      G_randState_64_1 => G_randState_64_1,
      G_randState_64_out => G_randState_64,
      G_randState_65_1 => G_randState_65_1,
      G_randState_65_out => G_randState_65,
      G_randState_66_1 => G_randState_66_1,
      G_randState_66_out => G_randState_66,
      G_randState_67_1 => G_randState_67_1,
      G_randState_67_out => G_randState_67,
      G_randState_68_1 => G_randState_68_1,
      G_randState_68_out => G_randState_68,
      G_randState_69_1 => G_randState_69_1,
      G_randState_69_out => G_randState_69,
      G_randState_6_1 => G_randState_6_1,
      G_randState_6_out => G_randState_6,
      G_randState_70_1 => G_randState_70_1,
      G_randState_70_out => G_randState_70,
      G_randState_71_1 => G_randState_71_1,
      G_randState_71_out => G_randState_71,
      G_randState_72_1 => G_randState_72_1,
      G_randState_72_out => G_randState_72,
      G_randState_73_1 => G_randState_73_1,
      G_randState_73_out => G_randState_73,
      G_randState_74_1 => G_randState_74_1,
      G_randState_74_out => G_randState_74,
      G_randState_75_1 => G_randState_75_1,
      G_randState_75_out => G_randState_75,
      G_randState_76_1 => G_randState_76_1,
      G_randState_76_out => G_randState_76,
      G_randState_77_1 => G_randState_77_1,
      G_randState_77_out => G_randState_77,
      G_randState_78_1 => G_randState_78_1,
      G_randState_78_out => G_randState_78,
      G_randState_79_1 => G_randState_79_1,
      G_randState_79_out => G_randState_79,
      G_randState_7_1 => G_randState_7_1,
      G_randState_7_out => G_randState_7,
      G_randState_80_1 => G_randState_80_1,
      G_randState_80_out => G_randState_80,
      G_randState_81_1 => G_randState_81_1,
      G_randState_81_out => G_randState_81,
      G_randState_82_1 => G_randState_82_1,
      G_randState_82_out => G_randState_82,
      G_randState_83_1 => G_randState_83_1,
      G_randState_83_out => G_randState_83,
      G_randState_84_1 => G_randState_84_1,
      G_randState_84_out => G_randState_84,
      G_randState_85_1 => G_randState_85_1,
      G_randState_85_out => G_randState_85,
      G_randState_86_1 => G_randState_86_1,
      G_randState_86_out => G_randState_86,
      G_randState_87_1 => G_randState_87_1,
      G_randState_87_out => G_randState_87,
      G_randState_88_1 => G_randState_88_1,
      G_randState_88_out => G_randState_88,
      G_randState_89_1 => G_randState_89_1,
      G_randState_89_out => G_randState_89,
      G_randState_8_1 => G_randState_8_1,
      G_randState_8_out => G_randState_8,
      G_randState_90_1 => G_randState_90_1,
      G_randState_90_out => G_randState_90,
      G_randState_91_1 => G_randState_91_1,
      G_randState_91_out => G_randState_91,
      G_randState_92_1 => G_randState_92_1,
      G_randState_92_out => G_randState_92,
      G_randState_93_1 => G_randState_93_1,
      G_randState_93_out => G_randState_93,
      G_randState_94_1 => G_randState_94_1,
      G_randState_94_out => G_randState_94,
      G_randState_95_1 => G_randState_95_1,
      G_randState_95_out => G_randState_95,
      G_randState_96_1 => G_randState_96_1,
      G_randState_96_out => G_randState_96,
      G_randState_97_1 => G_randState_97_1,
      G_randState_97_out => G_randState_97,
      G_randState_98_1 => G_randState_98_1,
      G_randState_98_out => G_randState_98,
      G_randState_99_1 => G_randState_99_1,
      G_randState_99_out => G_randState_99,
      G_randState_9_1 => G_randState_9_1,
      G_randState_9_out => G_randState_9
    );

END;

-- Handel-C macro: 'ww_pxSample'
ARCHITECTURE behaviour OF module_norm_core_ww_pxSample IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Global constant
  CONSTANT G_GND : std_logic := '0';
  -- Register 'resBuff_0'
  SIGNAL G_resBuff_0 : unsigned(23 DOWNTO 0);
  -- Register 'resBuff_1'
  SIGNAL G_resBuff_1 : unsigned(23 DOWNTO 0);
  -- global connection
  SIGNAL G_Z_Dones_1 : std_logic;
  -- global connection
  SIGNAL G_BinOpOut_6 : unsigned(23 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_1 : unsigned(23 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut : unsigned(23 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_10 : unsigned(8 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_5 : unsigned(8 DOWNTO 0);
  -- Concatenation
  SIGNAL AddrIn : unsigned(9 DOWNTO 0);
  -- Concatenation
  SIGNAL G_DataOut : unsigned(35 DOWNTO 0);
  -- Concatenation
  SIGNAL AddrIn_1 : unsigned(9 DOWNTO 0);
  -- Concatenation
  SIGNAL G_DataOut_1 : unsigned(35 DOWNTO 0);
  -- Constant value
  CONSTANT C_0 : unsigned(35 DOWNTO 0) := (OTHERS => '0');
  -- Take LSBs
  SIGNAL S_0 : unsigned(31 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_1 : unsigned(3 DOWNTO 0);
  -- MPRAM port A low bits out
  SIGNAL S_2 : std_logic_vector(31 DOWNTO 0);
  -- MPRAM port A high bits out
  SIGNAL S_3 : std_logic_vector(3 DOWNTO 0);
  -- Constant value
  CONSTANT C_1 : unsigned(4 DOWNTO 0) := "11111";
  -- Constant value
  CONSTANT C_2 : unsigned(0 DOWNTO 0) := "1";
  -- Concatenation
  SIGNAL S_4 : unsigned(15 DOWNTO 0);
  -- Concatenation
  SIGNAL S_5 : unsigned(3 DOWNTO 0);
  -- Constant value
  CONSTANT C_3 : unsigned(35 DOWNTO 0) := (OTHERS => '0');
  -- Take LSBs
  SIGNAL S_6 : unsigned(31 DOWNTO 0);
  -- Bit range selection
  SIGNAL S_7 : unsigned(3 DOWNTO 0);
  -- MPRAM port B low bits out
  SIGNAL S_8 : std_logic_vector(31 DOWNTO 0);
  -- MPRAM port B high bits out
  SIGNAL S_9 : std_logic_vector(3 DOWNTO 0);
  -- Constant value
  CONSTANT C_4 : unsigned(4 DOWNTO 0) := "11111";
  -- Constant value
  CONSTANT C_5 : unsigned(0 DOWNTO 0) := "1";
  -- Concatenation
  SIGNAL S_10 : unsigned(15 DOWNTO 0);
  -- Concatenation
  SIGNAL S_11 : unsigned(3 DOWNTO 0);
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_ADDRA : std_logic_vector(15 DOWNTO 0);
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_ADDRB : std_logic_vector(15 DOWNTO 0);
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_DIA : std_logic_vector(31 DOWNTO 0);
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_DIB : std_logic_vector(31 DOWNTO 0);
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_DIPA : std_logic_vector(3 DOWNTO 0);
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_DIPB : std_logic_vector(3 DOWNTO 0);
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_REGCEA_GND : std_logic;
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_REGCEB_GND : std_logic;
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_SSRA_GND : std_logic;
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_SSRB_GND : std_logic;
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_WEA : std_logic_vector(3 DOWNTO 0);
  -- Component Connector
  SIGNAL I0_aliasTables_0_norm_gen_751_WEB : std_logic_vector(3 DOWNTO 0);

  -- Component declaration
  COMPONENT module_norm_core_p2Add
  PORT (
    G_BinOpOut_out : OUT unsigned(23 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic;
    G_resBuff_0 : IN unsigned(23 DOWNTO 0);
    G_resBuff_1 : IN unsigned(23 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_ww_pxSingleSample
  PORT (
    G_BinOpOut_1_out : OUT unsigned(23 DOWNTO 0);
    G_BinOpOut_5_out : OUT unsigned(8 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_DataOut_1 : IN unsigned(35 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_randVal : IN unsigned(127 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_ww_pxSingleSample_1
  PORT (
    G_BinOpOut_10_out : OUT unsigned(8 DOWNTO 0);
    G_BinOpOut_6_out : OUT unsigned(23 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_DataOut : IN unsigned(35 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_Z_Dones_1_out : OUT std_logic;
    G_randVal : IN unsigned(127 DOWNTO 0);
    iReset : IN std_logic
  );
  END COMPONENT;

BEGIN

  -- Processes:

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'resBuff_1'
      IF ( G_CForkIn='1' ) THEN
        G_resBuff_1 <= G_BinOpOut_1;
      END IF;

      -- Update of register 'resBuff_0'
      IF ( G_CForkIn='1' ) THEN
        G_resBuff_0 <= G_BinOpOut_6;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  S_11 <= unsigned(to_stdlogicvector(G_GND)) & unsigned(to_stdlogicvector(G_GND)) & unsigned(to_stdlogicvector(G_GND)) & unsigned(to_stdlogicvector(G_GND));
  S_10 <= C_5 & AddrIn_1 & C_4;
  G_DataOut_1 <= UNSIGNED(S_9) & UNSIGNED(S_8);
  S_7 <= C_3(35 DOWNTO 32);
  S_6 <= RESIZE(C_3, 32);
  S_5 <= unsigned(to_stdlogicvector(G_GND)) & unsigned(to_stdlogicvector(G_GND)) & unsigned(to_stdlogicvector(G_GND)) & unsigned(to_stdlogicvector(G_GND));
  S_4 <= C_2 & AddrIn & C_1;
  G_DataOut <= UNSIGNED(S_3) & UNSIGNED(S_2);
  S_1 <= C_0(35 DOWNTO 32);
  S_0 <= RESIZE(C_0, 32);
  AddrIn_1 <= unsigned(to_stdlogicvector(G_GND)) & G_BinOpOut_5(8 DOWNTO 8) & G_BinOpOut_5(7 DOWNTO 7) & G_BinOpOut_5(6 DOWNTO 6) & 
    G_BinOpOut_5(5 DOWNTO 5) & G_BinOpOut_5(4 DOWNTO 4) & G_BinOpOut_5(3 DOWNTO 3) & G_BinOpOut_5(2 DOWNTO 2) & 
    G_BinOpOut_5(1 DOWNTO 1) & G_BinOpOut_5(0 DOWNTO 0);
  AddrIn <= unsigned(to_stdlogicvector(G_GND)) & G_BinOpOut_10(8 DOWNTO 8) & G_BinOpOut_10(7 DOWNTO 7) & G_BinOpOut_10(6 DOWNTO 6) & 
    G_BinOpOut_10(5 DOWNTO 5) & G_BinOpOut_10(4 DOWNTO 4) & G_BinOpOut_10(3 DOWNTO 3) & G_BinOpOut_10(2 DOWNTO 2) & 
    G_BinOpOut_10(1 DOWNTO 1) & G_BinOpOut_10(0 DOWNTO 0);
  I0_aliasTables_0_norm_gen_751_ADDRA <= STD_LOGIC_VECTOR(S_4);
  I0_aliasTables_0_norm_gen_751_ADDRB <= STD_LOGIC_VECTOR(S_10);
  I0_aliasTables_0_norm_gen_751_DIA <= STD_LOGIC_VECTOR(S_0);
  I0_aliasTables_0_norm_gen_751_DIB <= STD_LOGIC_VECTOR(S_6);
  I0_aliasTables_0_norm_gen_751_DIPA <= STD_LOGIC_VECTOR(S_1);
  I0_aliasTables_0_norm_gen_751_DIPB <= STD_LOGIC_VECTOR(S_7);
  I0_aliasTables_0_norm_gen_751_REGCEA_GND <= G_GND;
  I0_aliasTables_0_norm_gen_751_REGCEB_GND <= G_GND;
  I0_aliasTables_0_norm_gen_751_SSRA_GND <= G_GND;
  I0_aliasTables_0_norm_gen_751_SSRB_GND <= G_GND;
  I0_aliasTables_0_norm_gen_751_WEA <= STD_LOGIC_VECTOR(S_5);
  I0_aliasTables_0_norm_gen_751_WEB <= STD_LOGIC_VECTOR(S_11);


  -- Port connections:

  G_Z_Dones_1_out <= G_Z_Dones_1;
  G_BinOpOut_out <= G_BinOpOut;


  -- Component instances:

  -- MPRAM component instance 'aliasTables_0'
  I0_aliasTables_0_norm_gen_751 : RAMB36
    GENERIC MAP (
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"1111100000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"dccdeffffffffffffeddccbbaa99988777666555544443333332222222111111",
      INITP_03 => X"cccddddeefefffffffffffffffeedddcceffffffffffeeddcceffffffffffeed",
      INITP_04 => X"ddeeffffffffffecccdeeffffffffffdccdddeeffffffffffffffffefedddddc",
      INITP_05 => X"111111122222223333334444555566677788999aabbccddeffffffffffffedcc",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000001111",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"00017107000148f800012305000102fa0000e4fb0000cb020000b3010000a0fe",
      INIT_01 => X"0003b70f00034ef00002f10d00029d0c000252f30002110a0001d5090001a108",
      INIT_02 => X"00094f1700084f1600076b1500069eea0005e6eb000543120004aeed00042cee",
      INIT_03 => X"0016a71f00144d1e00122ee1001048e2000e92e3000d08e4000ba919000a6b18",
      INIT_04 => X"0035790600301af8002b43040026e2fa0022ef02001f5efd001c2900001942fe",
      INIT_05 => X"007a5f0c006e870b0063c8f4005a08dd005134f5004935090041f4f7003b6707",
      INIT_06 => X"010f7cd900f62aee00df192400ca18da00b6fb0e00a598db0095c92300876af2",
      INIT_07 => X"0247c928021368d601e3811401b7b2ea018faaeb016b19130149b8ec012b4311",
      INIT_08 => X"04c0bee40457ed2b03f7a0d3039f3ad4034e1b180303b2e702bf7f2902810316",
      INIT_09 => X"0999fd1f08cf032f0813cacf076730d006c824e20635acd105aed91b0532cee3",
      INIT_0A => X"12ccaf0511508b040ff070fb0eaa7afc0d7cdcfd0c65eece0b641b000a75eadf",
      INIT_0B => X"23ad333220fcbadd1e7c57091c28ff0819ffd10717fe16cd16213cde1466dd06",
      INIT_0C => X"419f22ca3ce9972338837ef134682af2309328cb2d00432229ab76f32690faf4",
      INIT_0D => X"74fcbd366d045b11658a4ad95e87aeee57f5f93551cee4da4c0c7cef46a90af0",
      INIT_0E => X"ca247ce9bd1ba938b0d3e4eaa5439cd79a619ceb90250cc786856d267d7a98ec",
      INIT_0F => X"52891ed43df229182a7676e7180962c4069eb129f62a8516e6a16ac5d7f84cd6",
      INIT_10 => X"2583871b061ccad2e844613dcbea90e4b10008d39775d2c27f3d551968485ec3",
      INIT_11 => X"6087c72f325180be0632c91ddc197f2eb3f3b73f8dafd4e2693c7b2d46889ec0",
      INIT_12 => X"26490b42e4b3e501a5cd34fd6981d8fe2fbead00f8709edfc384af4190e7fae0",
      INIT_13 => X"9c5886f742aa56bbec3f4af89905a8de48eb5f20fbde0efab1cb1f036a9fc4fc",
      INIT_14 => X"e6f00cf370e5170bfe9850f48ffcb74425047b21bda110dd59c33ef6f95b3307",
      INIT_15 => X"22e92ce98d8bf733fc3100f16ed3deece56edd245ffb090cde7046dc60c55f22",
      INIT_16 => X"d4999744f8cb6ecafffe32c5d4c9d0da755f2eb6edb8c50bff7f9f16bc4bb2d9",
      INIT_17 => X"44dda311f05e4535b21fecf00760b6b69d0144f0bab1774deee0f7359d748ccc",
      INIT_18 => X"d30f6ab6f5fc2d39ffffd6e8f6cd14ed64bd6110b473470e28c34ad7ada1caeb",
      INIT_19 => X"8e59a6f1e166d4ef942f5734ffe6271690e206eefffebee8ff2db0cafd921316",
      INIT_1A => X"acd91f49fd9c9cb5fb63cce8519382d6b8fae347172a06b883f80ad8006db6ee",
      INIT_1B => X"412ebaf20adb66ea5486df4594b81ac5b44ab2c8f7afa149fdfcb0eedca98710",
      INIT_1C => X"ebf762b1406f0724be47c6b742375546cdde10f264a1ccc80670ef10b72b7734",
      INIT_1D => X"e9b0b4d6ffdbf549ffc7f536fe65aee8c95216c596232ce8f355b936ffffd4e8",
      INIT_1E => X"cfe4050f441424c9f292fcb2ff963d39ff1724c590983d489ba12125f2231512",
      INIT_1F => X"723b8d0da86a1b0ed94bd34788c36d4a6a90b136d4c306b3a4ff95375ce7db38",
      INIT_20 => X"2ce022da09b39714f2080d4b8ab476b4b1b8171344704325182f4cd96ea9d4b8",
      INIT_21 => X"d9d64b15fff0a736c52ee7489c4078edfdd306ccf68f03255668cf35e3b358ef",
      INIT_22 => X"ebb32f28fffbf8e8f424b0f395272b16cd43d139ffc838e8ff7d3536f39fcec9",
      INIT_23 => X"4052cccbb7f670b7071d8948640f5549ce5a1acb41ce830dbdef612240b96ef3",
      INIT_24 => X"9bd9f311dc44130afffee8c5fe731348ac6e8f36d8d76ae9bbe1750bbac70b0c",
      INIT_25 => X"8f14dedbffceaac983713726179c1727b95b2eb951426328fba24948ff8256b5",
      INIT_26 => X"ca6d34eefffefd49fd531d16eccd3b45ee315cc8f89908c5eddd874ca51b7923",
      INIT_27 => X"44dda2edada1cac728c34b23b47346ca64bd610af6cd1511ffe166c5c55810b5",
      INIT_28 => X"f0a214ecb9d30eb1fd048eb5fa4348ee469638db48f5dcb5b21feccaf05e44da",
      INIT_29 => X"22e92d15bc4bb2f4fd69f2cce9034f4d92a43539d2d8c724ffffc8e8fff62525",
      INIT_2A => X"e6f00d4560c55eb9de7047335ffb0946e56edd0f6ed3df12fc3100dc8d8bf6c6",
      INIT_2B => X"9c588731f95b330859c33ef5bda1110925047aba8ffcb732fe9850cc70e5170a",
      INIT_2C => X"26490b026a9fc4fbb1cb1f04fbde0ef948eb5f059905a906ec3f4b4342aa56cd",
      INIT_2D => X"6087c6cf90e7fb1ec384aebdf8709f1f2fbeacff6981d930a5cd34cee4b3e4bc",
      INIT_2E => X"258386e346889f3e693c7ad18dafd51cb3f3b6bfdc197ed00632c8e132518140",
      INIT_2F => X"52891f2a68485f3b7f3d54e59775d33cb100092bcbea911ae84460c1061ccb2c",
      INIT_30 => X"ca247d15d7f84d28e6a16b39f62a84e8069eb0d51809633a2a7677173df228e6",
      INIT_31 => X"74fcbcc87d7a991286856cd890250d379a619d13a5439d27b0d3e514bd1ba8c6",
      INIT_32 => X"419f233446a90b0e4c0c7d0f51cee52457f5f8c95e87af10658a4b256d045aed",
      INIT_33 => X"23ad32cc2690fb0a29ab770b2d0042dc3093293334682b0c38837f0d3ce996db",
      INIT_34 => X"12ccaef91466dcf816213d2017fe173119ffd0f71c28fef61e7c56f520fcbb21",
      INIT_35 => X"0999fd1e0a75eaff0b641afe0c65ef300d7cdd010eaa7b020ff0710311508afa",
      INIT_36 => X"04c0bed20532cf2c05aed92d0635ad1c06c8252e076730e10813cb1d08cf02e0",
      INIT_37 => X"0247c8e8028102d502bf7f170303b2e6034e1b2a039f3b1903f7a0e50457ed1a",
      INIT_38 => X"010f7ced012b43120149b8d8016b1926018faad701b7b32701e38115021368e9",
      INIT_39 => X"007a5f2200876af10095c90d00a598f000b6fb0f00ca18ef00df191000f62b25",
      INIT_3A => X"003578de003b67200041f4f60049350800513521005a090a0063c8f3006e86dc",
      INIT_3B => X"0016a6df001942ff001c2901001f5efc0022ef030026e2fb002b430500301af9",
      INIT_3C => X"00094ee7000a6ae6000ba8e5000d091a000e931b0010491c00122f1d00144ce0",
      INIT_3D => X"0003b6ef00042d100004af11000542ec0005e71300069f1400076ae900084ee8",
      INIT_3E => X"000170f70001a0f60001d4f5000210f40002530b00029cf20002f0f100034f0e",
      INIT_3F => X"000000ff0000a1000000b2fd0000cafc0000e50300010304000122f900014906",
      INIT_40 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_41 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_42 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_43 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_44 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_45 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_46 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_47 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_48 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_49 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_4A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_4B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_4C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_4D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_4E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_4F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_50 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_51 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_52 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_53 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_54 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_55 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_56 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_57 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_58 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_59 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_5A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_5B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_5C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_5D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_5E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_5F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_60 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_61 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_62 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_63 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_64 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_65 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_66 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_67 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_68 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_69 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_6A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_6B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_6C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_6D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_6E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_6F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_70 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_71 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_72 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_73 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_74 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_75 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_76 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_77 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_78 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_79 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_7A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_7B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_7C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_7D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_7E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_7F => X"0000000000000000000000000000000000000000000000000000000000000000",
      READ_WIDTH_A => 36,
      READ_WIDTH_B => 36,
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 36,
      WRITE_WIDTH_B => 36
    )
    PORT MAP (
      CASCADEINLATA => '0', CASCADEINLATB => '0', CASCADEINREGA => '0', CASCADEINREGB => '0', ADDRA=> I0_aliasTables_0_norm_gen_751_ADDRA,
      ADDRB => I0_aliasTables_0_norm_gen_751_ADDRB,
      CLKA => G_S_0,
      CLKB => G_S_0,
      DIA => I0_aliasTables_0_norm_gen_751_DIA,
      DIB => I0_aliasTables_0_norm_gen_751_DIB,
      DIPA => I0_aliasTables_0_norm_gen_751_DIPA,
      DIPB => I0_aliasTables_0_norm_gen_751_DIPB,
      DOA => S_2,
      DOB => S_8,
      DOPA => S_3,
      DOPB => S_9,
      ENA => G_CForkIn,
      ENB => G_CForkIn,
      REGCEA => I0_aliasTables_0_norm_gen_751_REGCEA_GND,
      REGCEB => I0_aliasTables_0_norm_gen_751_REGCEB_GND,
      SSRA => I0_aliasTables_0_norm_gen_751_SSRA_GND,
      SSRB => I0_aliasTables_0_norm_gen_751_SSRB_GND,
      WEA => I0_aliasTables_0_norm_gen_751_WEA,
      WEB => I0_aliasTables_0_norm_gen_751_WEB
    );

  -- Instantiation
  I0_module : module_norm_core_p2Add
    PORT MAP (
      G_BinOpOut_out => G_BinOpOut,
      G_CForkIn => G_CForkIn,
      G_S_0 => G_S_0,
      G_resBuff_0 => G_resBuff_0,
      G_resBuff_1 => G_resBuff_1
    );

  -- Instantiation
  I1_module : module_norm_core_ww_pxSingleSample
    PORT MAP (
      G_BinOpOut_1_out => G_BinOpOut_1,
      G_BinOpOut_5_out => G_BinOpOut_5,
      G_CForkIn => G_CForkIn,
      G_DataOut_1 => G_DataOut_1,
      G_S_0 => G_S_0,
      G_randVal => G_randVal
    );

  -- Instantiation
  I2_module : module_norm_core_ww_pxSingleSample_1
    PORT MAP (
      G_BinOpOut_10_out => G_BinOpOut_10,
      G_BinOpOut_6_out => G_BinOpOut_6,
      G_CForkIn => G_CForkIn,
      G_DataOut => G_DataOut,
      G_S_0 => G_S_0,
      G_Z_Dones_1_out => G_Z_Dones_1,
      G_randVal => G_randVal,
      iReset => iReset
    );

END;

-- Handel-C macro: 'p2Add'
ARCHITECTURE behaviour OF module_norm_core_p2Add IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Global constant
  CONSTANT G_ConstOut : unsigned(0 DOWNTO 0) := "0";
  -- Register 'c1_loSum'
  SIGNAL c1_loSum : unsigned(12 DOWNTO 0);
  -- Register 'c1_hiA'
  SIGNAL c1_hiA : unsigned(11 DOWNTO 0);
  -- Register 'c1_hiB'
  SIGNAL c1_hiB : unsigned(11 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut : unsigned(12 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_1 : unsigned(12 DOWNTO 0);
  -- Plus
  SIGNAL BinOpOut_2 : unsigned(12 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_3 : unsigned(11 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_4 : unsigned(11 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_5 : unsigned(12 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_6 : unsigned(12 DOWNTO 0);
  -- Plus
  SIGNAL BinOpOut_7 : unsigned(12 DOWNTO 0);
  -- Concatenation
  SIGNAL G_BinOpOut : unsigned(23 DOWNTO 0);

BEGIN

  -- Processes:

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'c1_hiB'
      IF ( G_CForkIn='1' ) THEN
        c1_hiB <= BinOpOut_4;
      END IF;

      -- Update of register 'c1_hiA'
      IF ( G_CForkIn='1' ) THEN
        c1_hiA <= BinOpOut_3;
      END IF;

      -- Update of register 'c1_loSum'
      IF ( G_CForkIn='1' ) THEN
        c1_loSum <= BinOpOut_2;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  G_BinOpOut <= BinOpOut_7(12 DOWNTO 1) & RESIZE(c1_loSum, 12);
  BinOpOut_7 <= BinOpOut_5 + BinOpOut_6;
  BinOpOut_6 <= c1_hiB & c1_loSum(12 DOWNTO 12);
  BinOpOut_5 <= c1_hiA & G_ConstOut;
  BinOpOut_4 <= G_resBuff_1(23 DOWNTO 12);
  BinOpOut_3 <= G_resBuff_0(23 DOWNTO 12);
  BinOpOut_2 <= BinOpOut + BinOpOut_1;
  BinOpOut_1 <= G_ConstOut & RESIZE(G_resBuff_1, 12);
  BinOpOut <= G_ConstOut & RESIZE(G_resBuff_0, 12);


  -- Port connections:

  G_BinOpOut_out <= G_BinOpOut;

END;

-- Handel-C macro: 'ww_pxSingleSample'
ARCHITECTURE behaviour OF module_norm_core_ww_pxSingleSample IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- global connection
  SIGNAL G_BinOpOut_1 : unsigned(23 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_5 : unsigned(8 DOWNTO 0);

  -- Component declaration
  COMPONENT module_norm_core_SingleSample_pxImpl
  PORT (
    G_BinOpOut_1_out : OUT unsigned(23 DOWNTO 0);
    G_BinOpOut_5_out : OUT unsigned(8 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_DataOut_1 : IN unsigned(35 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_randVal : IN unsigned(127 DOWNTO 0)
  );
  END COMPONENT;

BEGIN

  -- Port connections:

  G_BinOpOut_1_out <= G_BinOpOut_1;
  G_BinOpOut_5_out <= G_BinOpOut_5;


  -- Component instances:

  -- Instantiation
  I0_module : module_norm_core_SingleSample_pxImpl
    PORT MAP (
      G_BinOpOut_1_out => G_BinOpOut_1,
      G_BinOpOut_5_out => G_BinOpOut_5,
      G_CForkIn => G_CForkIn,
      G_DataOut_1 => G_DataOut_1,
      G_S_0 => G_S_0,
      G_randVal => G_randVal
    );

END;

-- Handel-C macro: 'SingleSample_pxImpl'
ARCHITECTURE behaviour OF module_norm_core_SingleSample_pxImpl IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Global constant
  CONSTANT G_ConstOut : unsigned(0 DOWNTO 0) := "0";
  -- Register 'c2_index'
  SIGNAL G_c2_index : unsigned(8 DOWNTO 0);
  -- Register 'c2_aliasWord'
  SIGNAL G_c2_aliasWord : unsigned(35 DOWNTO 0);
  -- global connection
  SIGNAL G_bufferZ_2 : unsigned(8 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_4 : unsigned(63 DOWNTO 0);
  -- Register 'c3_index'
  SIGNAL c3_index : unsigned(8 DOWNTO 0);
  -- Register 'c3_alt'
  SIGNAL c3_alt : unsigned(8 DOWNTO 0);
  -- Register 'c3_swap'
  SIGNAL c3_swap : unsigned(0 DOWNTO 0);
  -- Register 'c3a_highGreater'
  SIGNAL c3a_highGreater : unsigned(0 DOWNTO 0);
  -- Take LSBs
  SIGNAL BinOpOut : unsigned(35 DOWNTO 0);
  -- Test for unsigned greater than
  SIGNAL BinOpOut_1 : std_logic;
  -- global connection
  SIGNAL G_bufferZ_1 : unsigned(8 DOWNTO 0);
  -- global connection
  SIGNAL G_bufferZ : unsigned(8 DOWNTO 0);
  -- Register 'c4_index'
  SIGNAL G_c4_index : unsigned(8 DOWNTO 0);
  -- Register 'c4_tta'
  SIGNAL G_c4_tta : unsigned(14 DOWNTO 0);
  -- Register 'c4_ttb'
  SIGNAL G_c4_ttb : unsigned(14 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL c3_alt_1 : unsigned(8 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_2 : unsigned(14 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_3 : unsigned(14 DOWNTO 0);
  -- Unary minus
  SIGNAL UnaryOpOut : signed(14 DOWNTO 0);
  -- Register 'c5_base'
  SIGNAL G_c5_base : unsigned(9 DOWNTO 0);
  -- Register 'c5_ttDist'
  SIGNAL G_c5_ttDist : unsigned(14 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_3 : unsigned(9 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_2 : unsigned(14 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_1 : unsigned(23 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_5 : unsigned(8 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables : std_logic_vector(1 DOWNTO 0);

  -- Component declaration
  COMPONENT module_norm_core_p2Add_1
  PORT (
    G_BinOpOut_1_out : OUT unsigned(23 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic;
    G_c5_base : IN unsigned(9 DOWNTO 0);
    G_c5_ttDist : IN unsigned(14 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_pxDelayedAssign
  PORT (
    G_BinOpOut_2_out : OUT unsigned(14 DOWNTO 0);
    G_c4_tta : IN unsigned(14 DOWNTO 0);
    G_c4_ttb : IN unsigned(14 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_pxDelayedAssign_1
  PORT (
    G_BinOpOut_3_out : OUT unsigned(9 DOWNTO 0);
    G_c4_index : IN unsigned(8 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_pxDelayedAssign_2
  PORT (
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic;
    G_bufferZ_out : OUT unsigned(8 DOWNTO 0);
    G_c2_aliasWord : IN unsigned(35 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_pxDelayedAssign_3
  PORT (
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic;
    G_bufferZ_1_out : OUT unsigned(8 DOWNTO 0);
    G_c2_index : IN unsigned(8 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_pxDelayedAssign_4
  PORT (
    G_BinOpOut_4_out : OUT unsigned(63 DOWNTO 0);
    G_BinOpOut_5_out : OUT unsigned(8 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic;
    G_bufferZ_2_out : OUT unsigned(8 DOWNTO 0);
    G_randVal : IN unsigned(127 DOWNTO 0)
  );
  END COMPONENT;

BEGIN

  -- Processes:

  PROCESS( c3_index, c3_alt, MuxEnables ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables IS
      WHEN "10" => c3_alt_1 <= c3_alt;
      WHEN "01" => c3_alt_1 <= c3_index;
      WHEN OTHERS => c3_alt_1 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'c5_ttDist'
      IF ( G_CForkIn='1' ) THEN
        G_c5_ttDist <= G_BinOpOut_2;
      END IF;

      -- Update of register 'c5_base'
      IF ( G_CForkIn='1' ) THEN
        G_c5_base <= G_BinOpOut_3;
      END IF;

      -- Update of register 'c4_ttb'
      IF ( G_CForkIn='1' ) THEN
        G_c4_ttb <= UNSIGNED(UnaryOpOut);
      END IF;

      -- Update of register 'c4_tta'
      IF ( G_CForkIn='1' ) THEN
        G_c4_tta <= BinOpOut_2;
      END IF;

      -- Update of register 'c4_index'
      IF ( G_CForkIn='1' ) THEN
        G_c4_index <= c3_alt_1;
      END IF;

      -- Update of register 'c3a_highGreater'
      IF ( G_CForkIn='1' ) THEN
        c3a_highGreater <= unsigned(to_stdlogicvector(BinOpOut_1));
      END IF;

      -- Update of register 'c3_swap'
      IF ( G_CForkIn='1' ) THEN
        c3_swap <= c3a_highGreater;
      END IF;

      -- Update of register 'c3_alt'
      IF ( G_CForkIn='1' ) THEN
        c3_alt <= G_bufferZ;
      END IF;

      -- Update of register 'c3_index'
      IF ( G_CForkIn='1' ) THEN
        c3_index <= G_bufferZ_1;
      END IF;

      -- Update of register 'c2_aliasWord'
      IF ( G_CForkIn='1' ) THEN
        G_c2_aliasWord <= G_DataOut_1;
      END IF;

      -- Update of register 'c2_index'
      IF ( G_CForkIn='1' ) THEN
        G_c2_index <= G_bufferZ_2;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  MuxEnables <= to_stdlogic(c3_swap) & not(to_stdlogic(c3_swap));
  UnaryOpOut <= -SIGNED(BinOpOut_3);
  BinOpOut_3 <= G_ConstOut & G_BinOpOut_4(63 DOWNTO 50);
  BinOpOut_2 <= G_ConstOut & RESIZE(G_BinOpOut_4(63 DOWNTO 36), 14);
  BinOpOut_1 <= to_stdlogic(BinOpOut(35 DOWNTO 22) > G_c2_aliasWord(35 DOWNTO 22));
  BinOpOut <= RESIZE(G_BinOpOut_4, 36);


  -- Port connections:

  G_BinOpOut_1_out <= G_BinOpOut_1;
  G_BinOpOut_5_out <= G_BinOpOut_5;


  -- Component instances:

  -- Instantiation
  I0_module : module_norm_core_p2Add_1
    PORT MAP (
      G_BinOpOut_1_out => G_BinOpOut_1,
      G_CForkIn => G_CForkIn,
      G_S_0 => G_S_0,
      G_c5_base => G_c5_base,
      G_c5_ttDist => G_c5_ttDist
    );

  -- Instantiation
  I1_module : module_norm_core_pxDelayedAssign
    PORT MAP (
      G_BinOpOut_2_out => G_BinOpOut_2,
      G_c4_tta => G_c4_tta,
      G_c4_ttb => G_c4_ttb
    );

  -- Instantiation
  I2_module : module_norm_core_pxDelayedAssign_1
    PORT MAP (
      G_BinOpOut_3_out => G_BinOpOut_3,
      G_c4_index => G_c4_index
    );

  -- Instantiation
  I3_module : module_norm_core_pxDelayedAssign_2
    PORT MAP (
      G_CForkIn => G_CForkIn,
      G_S_0 => G_S_0,
      G_bufferZ_out => G_bufferZ,
      G_c2_aliasWord => G_c2_aliasWord
    );

  -- Instantiation
  I4_module : module_norm_core_pxDelayedAssign_3
    PORT MAP (
      G_CForkIn => G_CForkIn,
      G_S_0 => G_S_0,
      G_bufferZ_1_out => G_bufferZ_1,
      G_c2_index => G_c2_index
    );

  -- Instantiation
  I5_module : module_norm_core_pxDelayedAssign_4
    PORT MAP (
      G_BinOpOut_4_out => G_BinOpOut_4,
      G_BinOpOut_5_out => G_BinOpOut_5,
      G_CForkIn => G_CForkIn,
      G_S_0 => G_S_0,
      G_bufferZ_2_out => G_bufferZ_2,
      G_randVal => G_randVal
    );

END;

-- Handel-C macro: 'p2Add'
ARCHITECTURE behaviour OF module_norm_core_p2Add_1 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Global constant
  CONSTANT G_ConstOut : unsigned(0 DOWNTO 0) := "0";
  -- Global constant
  CONSTANT G_ConstOut_1 : unsigned(8 DOWNTO 0) := "111111111";
  -- Global constant
  CONSTANT G_ConstOut_2 : unsigned(8 DOWNTO 0) := (OTHERS => '0');
  -- Register 'c1_loSum'
  SIGNAL c1_loSum : unsigned(12 DOWNTO 0);
  -- Register 'c1_hiA'
  SIGNAL c1_hiA : unsigned(11 DOWNTO 0);
  -- Register 'c1_hiB'
  SIGNAL c1_hiB : unsigned(11 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut : unsigned(12 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_1 : unsigned(11 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_2 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL ConstOut : unsigned(8 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_3 : unsigned(23 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_4 : unsigned(11 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_5 : unsigned(12 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_6 : unsigned(12 DOWNTO 0);
  -- Plus
  SIGNAL BinOpOut_7 : unsigned(12 DOWNTO 0);
  -- Concatenation
  SIGNAL G_BinOpOut_1 : unsigned(23 DOWNTO 0);
  -- Global constant
  CONSTANT G_zero : unsigned(13 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_8 : unsigned(23 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables : std_logic_vector(1 DOWNTO 0);

BEGIN

  -- Processes:

  PROCESS( MuxEnables ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables IS
      WHEN "10" => ConstOut <= G_ConstOut_1;
      WHEN "01" => ConstOut <= G_ConstOut_2;
      WHEN OTHERS => ConstOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'c1_hiB'
      IF ( G_CForkIn='1' ) THEN
        c1_hiB <= BinOpOut_4;
      END IF;

      -- Update of register 'c1_hiA'
      IF ( G_CForkIn='1' ) THEN
        c1_hiA <= BinOpOut_1;
      END IF;

      -- Update of register 'c1_loSum'
      IF ( G_CForkIn='1' ) THEN
        c1_loSum <= BinOpOut;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  MuxEnables <= to_stdlogic(BinOpOut_2) & not(to_stdlogic(BinOpOut_2));
  BinOpOut_3 <= ConstOut & G_c5_ttDist;
  BinOpOut_2 <= G_c5_ttDist(14 DOWNTO 14);
  BinOpOut_8 <= G_c5_base & G_zero;
  G_BinOpOut_1 <= BinOpOut_7(12 DOWNTO 1) & RESIZE(c1_loSum, 12);
  BinOpOut_7 <= BinOpOut_5 + BinOpOut_6;
  BinOpOut_6 <= c1_hiB & c1_loSum(12 DOWNTO 12);
  BinOpOut_5 <= c1_hiA & G_ConstOut;
  BinOpOut_4 <= BinOpOut_3(23 DOWNTO 12);
  BinOpOut_1 <= BinOpOut_8(23 DOWNTO 12);
  BinOpOut <= G_ConstOut & RESIZE(G_c5_ttDist, 12);


  -- Port connections:

  G_BinOpOut_1_out <= G_BinOpOut_1;

END;

-- Handel-C macro: 'pxDelayedAssign'
ARCHITECTURE behaviour OF module_norm_core_pxDelayedAssign IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Plus
  SIGNAL G_BinOpOut_2 : unsigned(14 DOWNTO 0);

BEGIN

  -- Combinational expressions:

  G_BinOpOut_2 <= G_c4_tta + G_c4_ttb;


  -- Port connections:

  G_BinOpOut_2_out <= G_BinOpOut_2;

END;

-- Handel-C macro: 'pxDelayedAssign'
ARCHITECTURE behaviour OF module_norm_core_pxDelayedAssign_1 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Global constant
  CONSTANT G_ConstOut : unsigned(0 DOWNTO 0) := "0";
  -- Global constant
  CONSTANT G_ConstOut_3 : unsigned(9 DOWNTO 0) := "0011111111";
  -- Concatenation
  SIGNAL BinOpOut : unsigned(9 DOWNTO 0);
  -- Minus
  SIGNAL G_BinOpOut_3 : unsigned(9 DOWNTO 0);

BEGIN

  -- Combinational expressions:

  G_BinOpOut_3 <= BinOpOut - G_ConstOut_3;
  BinOpOut <= G_ConstOut & G_c4_index;


  -- Port connections:

  G_BinOpOut_3_out <= G_BinOpOut_3;

END;

-- Handel-C macro: 'pxDelayedAssign'
ARCHITECTURE behaviour OF module_norm_core_pxDelayedAssign_2 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Register 'buffer'
  SIGNAL G_bufferZ : unsigned(8 DOWNTO 0);
  -- Take LSBs
  SIGNAL BinOpOut : unsigned(8 DOWNTO 0);

BEGIN

  -- Processes:

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'buffer'
      IF ( G_CForkIn='1' ) THEN
        G_bufferZ <= BinOpOut;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  BinOpOut <= RESIZE(G_c2_aliasWord, 9);


  -- Port connections:

  G_bufferZ_out <= G_bufferZ;

END;

-- Handel-C macro: 'pxDelayedAssign'
ARCHITECTURE behaviour OF module_norm_core_pxDelayedAssign_3 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Register 'buffer'
  SIGNAL G_bufferZ_1 : unsigned(8 DOWNTO 0);

BEGIN

  -- Processes:

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'buffer'
      IF ( G_CForkIn='1' ) THEN
        G_bufferZ_1 <= G_c2_index;
      END IF;
    END IF;
  END PROCESS;


  -- Port connections:

  G_bufferZ_1_out <= G_bufferZ_1;

END;

-- Handel-C macro: 'pxDelayedAssign'
ARCHITECTURE behaviour OF module_norm_core_pxDelayedAssign_4 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Register 'buffer'
  SIGNAL G_bufferZ_2 : unsigned(8 DOWNTO 0);
  -- Bit range selection
  SIGNAL G_BinOpOut_4 : unsigned(63 DOWNTO 0);
  -- Take LSBs
  SIGNAL G_BinOpOut_5 : unsigned(8 DOWNTO 0);

BEGIN

  -- Processes:

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'buffer'
      IF ( G_CForkIn='1' ) THEN
        G_bufferZ_2 <= G_BinOpOut_5;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  G_BinOpOut_5 <= RESIZE(G_BinOpOut_4, 9);
  G_BinOpOut_4 <= G_randVal(127 DOWNTO 64);


  -- Port connections:

  G_bufferZ_2_out <= G_bufferZ_2;
  G_BinOpOut_4_out <= G_BinOpOut_4;
  G_BinOpOut_5_out <= G_BinOpOut_5;

END;

-- Handel-C macro: 'ww_pxSingleSample'
ARCHITECTURE behaviour OF module_norm_core_ww_pxSingleSample_1 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- global connection
  SIGNAL G_Z_Dones_1 : std_logic;
  -- Global constant
  CONSTANT G_ConstOut : unsigned(0 DOWNTO 0) := "0";
  -- global connection
  SIGNAL G_BinOpOut_6 : unsigned(23 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_10 : unsigned(8 DOWNTO 0);

  -- Component declaration
  COMPONENT module_norm_core_SingleSample_pxImpl_1
  PORT (
    G_BinOpOut_10_out : OUT unsigned(8 DOWNTO 0);
    G_BinOpOut_6_out : OUT unsigned(23 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_DataOut : IN unsigned(35 DOWNTO 0);
    G_S_0 : IN std_logic;
    G_Z_Dones_1_out : OUT std_logic;
    G_randVal : IN unsigned(127 DOWNTO 0);
    iReset : IN std_logic
  );
  END COMPONENT;

BEGIN

  -- Port connections:

  G_Z_Dones_1_out <= G_Z_Dones_1;
  G_BinOpOut_6_out <= G_BinOpOut_6;
  G_BinOpOut_10_out <= G_BinOpOut_10;


  -- Component instances:

  -- Instantiation
  I0_module : module_norm_core_SingleSample_pxImpl_1
    PORT MAP (
      G_BinOpOut_10_out => G_BinOpOut_10,
      G_BinOpOut_6_out => G_BinOpOut_6,
      G_CForkIn => G_CForkIn,
      G_DataOut => G_DataOut,
      G_S_0 => G_S_0,
      G_Z_Dones_1_out => G_Z_Dones_1,
      G_randVal => G_randVal,
      iReset => iReset
    );

END;

-- Handel-C macro: 'SingleSample_pxImpl'
ARCHITECTURE behaviour OF module_norm_core_SingleSample_pxImpl_1 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Register 'c2_index'
  SIGNAL G_c2_index_1 : unsigned(8 DOWNTO 0);
  -- Register 'c2_aliasWord'
  SIGNAL G_c2_aliasWord_1 : unsigned(35 DOWNTO 0);
  -- global connection
  SIGNAL G_bufferZ_5 : unsigned(8 DOWNTO 0);
  -- global connection
  SIGNAL G_Z_Dones_1 : std_logic;
  -- Register 'c3_index'
  SIGNAL c3_index : unsigned(8 DOWNTO 0);
  -- Register 'c3_alt'
  SIGNAL c3_alt : unsigned(8 DOWNTO 0);
  -- Register 'c3_swap'
  SIGNAL c3_swap : unsigned(0 DOWNTO 0);
  -- Register 'c3a_highGreater'
  SIGNAL c3a_highGreater : unsigned(0 DOWNTO 0);
  -- Take LSBs
  SIGNAL BinOpOut : unsigned(35 DOWNTO 0);
  -- Test for unsigned greater than
  SIGNAL BinOpOut_1 : std_logic;
  -- global connection
  SIGNAL G_bufferZ_4 : unsigned(8 DOWNTO 0);
  -- global connection
  SIGNAL G_bufferZ_3 : unsigned(8 DOWNTO 0);
  -- Register 'c4_index'
  SIGNAL G_c4_index_1 : unsigned(8 DOWNTO 0);
  -- Register 'c4_tta'
  SIGNAL G_c4_tta_1 : unsigned(14 DOWNTO 0);
  -- Register 'c4_ttb'
  SIGNAL G_c4_ttb_1 : unsigned(14 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL c3_alt_1 : unsigned(8 DOWNTO 0);
  -- Constant value
  CONSTANT G_ConstOut : unsigned(0 DOWNTO 0) := "0";
  -- Concatenation
  SIGNAL BinOpOut_2 : unsigned(14 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_3 : unsigned(14 DOWNTO 0);
  -- Unary minus
  SIGNAL UnaryOpOut : signed(14 DOWNTO 0);
  -- Register 'c5_base'
  SIGNAL G_c5_base_1 : unsigned(9 DOWNTO 0);
  -- Register 'c5_ttDist'
  SIGNAL G_c5_ttDist_1 : unsigned(14 DOWNTO 0);
  -- Global constant
  CONSTANT G_ConstOut_3 : unsigned(9 DOWNTO 0) := "0011111111";
  -- global connection
  SIGNAL G_BinOpOut_8 : unsigned(9 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_7 : unsigned(14 DOWNTO 0);
  -- Global constant
  CONSTANT G_ConstOut_1 : unsigned(8 DOWNTO 0) := "111111111";
  -- Global constant
  CONSTANT G_ConstOut_2 : unsigned(8 DOWNTO 0) := (OTHERS => '0');
  -- global connection
  SIGNAL G_BinOpOut_6 : unsigned(23 DOWNTO 0);
  -- Global constant
  CONSTANT G_zero : unsigned(13 DOWNTO 0) := (OTHERS => '0');
  -- global connection
  SIGNAL G_BinOpOut_9 : unsigned(63 DOWNTO 0);
  -- global connection
  SIGNAL G_BinOpOut_10 : unsigned(8 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables : std_logic_vector(1 DOWNTO 0);

  -- Component declaration
  COMPONENT module_norm_core_p2Add_2
  PORT (
    G_BinOpOut_6_out : OUT unsigned(23 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic;
    G_c5_base_1 : IN unsigned(9 DOWNTO 0);
    G_c5_ttDist_1 : IN unsigned(14 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_pxDelayedAssign_5
  PORT (
    G_BinOpOut_7_out : OUT unsigned(14 DOWNTO 0);
    G_c4_tta_1 : IN unsigned(14 DOWNTO 0);
    G_c4_ttb_1 : IN unsigned(14 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_pxDelayedAssign_6
  PORT (
    G_BinOpOut_8_out : OUT unsigned(9 DOWNTO 0);
    G_c4_index_1 : IN unsigned(8 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_pxDelayedAssign_7
  PORT (
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic;
    G_bufferZ_3_out : OUT unsigned(8 DOWNTO 0);
    G_c2_aliasWord_1 : IN unsigned(35 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_pxDelayedAssign_8
  PORT (
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic;
    G_bufferZ_4_out : OUT unsigned(8 DOWNTO 0);
    G_c2_index_1 : IN unsigned(8 DOWNTO 0)
  );
  END COMPONENT;

  -- Component declaration
  COMPONENT module_norm_core_pxDelayedAssign_9
  PORT (
    G_BinOpOut_10_out : OUT unsigned(8 DOWNTO 0);
    G_BinOpOut_9_out : OUT unsigned(63 DOWNTO 0);
    G_CForkIn : IN std_logic;
    G_S_0 : IN std_logic;
    G_Z_Dones_1_out : OUT std_logic;
    G_bufferZ_5_out : OUT unsigned(8 DOWNTO 0);
    G_randVal : IN unsigned(127 DOWNTO 0);
    iReset : IN std_logic
  );
  END COMPONENT;

BEGIN

  -- Processes:

  PROCESS( c3_index, c3_alt, MuxEnables ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables IS
      WHEN "10" => c3_alt_1 <= c3_alt;
      WHEN "01" => c3_alt_1 <= c3_index;
      WHEN OTHERS => c3_alt_1 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'c5_ttDist'
      IF ( G_CForkIn='1' ) THEN
        G_c5_ttDist_1 <= G_BinOpOut_7;
      END IF;

      -- Update of register 'c5_base'
      IF ( G_CForkIn='1' ) THEN
        G_c5_base_1 <= G_BinOpOut_8;
      END IF;

      -- Update of register 'c4_ttb'
      IF ( G_CForkIn='1' ) THEN
        G_c4_ttb_1 <= UNSIGNED(UnaryOpOut);
      END IF;

      -- Update of register 'c4_tta'
      IF ( G_CForkIn='1' ) THEN
        G_c4_tta_1 <= BinOpOut_2;
      END IF;

      -- Update of register 'c4_index'
      IF ( G_CForkIn='1' ) THEN
        G_c4_index_1 <= c3_alt_1;
      END IF;

      -- Update of register 'c3a_highGreater'
      IF ( G_CForkIn='1' ) THEN
        c3a_highGreater <= unsigned(to_stdlogicvector(BinOpOut_1));
      END IF;

      -- Update of register 'c3_swap'
      IF ( G_CForkIn='1' ) THEN
        c3_swap <= c3a_highGreater;
      END IF;

      -- Update of register 'c3_alt'
      IF ( G_CForkIn='1' ) THEN
        c3_alt <= G_bufferZ_3;
      END IF;

      -- Update of register 'c3_index'
      IF ( G_CForkIn='1' ) THEN
        c3_index <= G_bufferZ_4;
      END IF;

      -- Update of register 'c2_aliasWord'
      IF ( G_CForkIn='1' ) THEN
        G_c2_aliasWord_1 <= G_DataOut;
      END IF;

      -- Update of register 'c2_index'
      IF ( G_CForkIn='1' ) THEN
        G_c2_index_1 <= G_bufferZ_5;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  MuxEnables <= to_stdlogic(c3_swap) & not(to_stdlogic(c3_swap));
  UnaryOpOut <= -SIGNED(BinOpOut_3);
  BinOpOut_3 <= G_ConstOut & G_BinOpOut_9(63 DOWNTO 50);
  BinOpOut_2 <= G_ConstOut & RESIZE(G_BinOpOut_9(63 DOWNTO 36), 14);
  BinOpOut_1 <= to_stdlogic(BinOpOut(35 DOWNTO 22) > G_c2_aliasWord_1(35 DOWNTO 22));
  BinOpOut <= RESIZE(G_randVal, 36);


  -- Port connections:

  G_Z_Dones_1_out <= G_Z_Dones_1;
  G_BinOpOut_6_out <= G_BinOpOut_6;
  G_BinOpOut_10_out <= G_BinOpOut_10;


  -- Component instances:

  -- Instantiation
  I0_module : module_norm_core_p2Add_2
    PORT MAP (
      G_BinOpOut_6_out => G_BinOpOut_6,
      G_CForkIn => G_CForkIn,
      G_S_0 => G_S_0,
      G_c5_base_1 => G_c5_base_1,
      G_c5_ttDist_1 => G_c5_ttDist_1
    );

  -- Instantiation
  I1_module : module_norm_core_pxDelayedAssign_5
    PORT MAP (
      G_BinOpOut_7_out => G_BinOpOut_7,
      G_c4_tta_1 => G_c4_tta_1,
      G_c4_ttb_1 => G_c4_ttb_1
    );

  -- Instantiation
  I2_module : module_norm_core_pxDelayedAssign_6
    PORT MAP (
      G_BinOpOut_8_out => G_BinOpOut_8,
      G_c4_index_1 => G_c4_index_1
    );

  -- Instantiation
  I3_module : module_norm_core_pxDelayedAssign_7
    PORT MAP (
      G_CForkIn => G_CForkIn,
      G_S_0 => G_S_0,
      G_bufferZ_3_out => G_bufferZ_3,
      G_c2_aliasWord_1 => G_c2_aliasWord_1
    );

  -- Instantiation
  I4_module : module_norm_core_pxDelayedAssign_8
    PORT MAP (
      G_CForkIn => G_CForkIn,
      G_S_0 => G_S_0,
      G_bufferZ_4_out => G_bufferZ_4,
      G_c2_index_1 => G_c2_index_1
    );

  -- Instantiation
  I5_module : module_norm_core_pxDelayedAssign_9
    PORT MAP (
      G_BinOpOut_10_out => G_BinOpOut_10,
      G_BinOpOut_9_out => G_BinOpOut_9,
      G_CForkIn => G_CForkIn,
      G_S_0 => G_S_0,
      G_Z_Dones_1_out => G_Z_Dones_1,
      G_bufferZ_5_out => G_bufferZ_5,
      G_randVal => G_randVal,
      iReset => iReset
    );

END;

-- Handel-C macro: 'p2Add'
ARCHITECTURE behaviour OF module_norm_core_p2Add_2 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Global constant
  CONSTANT G_ConstOut : unsigned(0 DOWNTO 0) := "0";
  -- Register 'c1_loSum'
  SIGNAL c1_loSum : unsigned(12 DOWNTO 0);
  -- Register 'c1_hiA'
  SIGNAL c1_hiA : unsigned(11 DOWNTO 0);
  -- Register 'c1_hiB'
  SIGNAL c1_hiB : unsigned(11 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut : unsigned(12 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_1 : unsigned(11 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_2 : unsigned(0 DOWNTO 0);
  -- Constant value
  CONSTANT G_ConstOut_1 : unsigned(8 DOWNTO 0) := "111111111";
  -- Constant value
  CONSTANT G_ConstOut_2 : unsigned(8 DOWNTO 0) := (OTHERS => '0');
  -- One-Hot Multiplexer
  SIGNAL ConstOut : unsigned(8 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_3 : unsigned(23 DOWNTO 0);
  -- Bit range selection
  SIGNAL BinOpOut_4 : unsigned(11 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_5 : unsigned(12 DOWNTO 0);
  -- Concatenation
  SIGNAL BinOpOut_6 : unsigned(12 DOWNTO 0);
  -- Plus
  SIGNAL BinOpOut_7 : unsigned(12 DOWNTO 0);
  -- Concatenation
  SIGNAL G_BinOpOut_6 : unsigned(23 DOWNTO 0);
  -- Constant value
  CONSTANT G_zero : unsigned(13 DOWNTO 0) := (OTHERS => '0');
  -- Concatenation
  SIGNAL BinOpOut_8 : unsigned(23 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables : std_logic_vector(1 DOWNTO 0);

BEGIN

  -- Processes:

  PROCESS( MuxEnables ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables IS
      WHEN "10" => ConstOut <= G_ConstOut_1;
      WHEN "01" => ConstOut <= G_ConstOut_2;
      WHEN OTHERS => ConstOut <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'c1_hiB'
      IF ( G_CForkIn='1' ) THEN
        c1_hiB <= BinOpOut_4;
      END IF;

      -- Update of register 'c1_hiA'
      IF ( G_CForkIn='1' ) THEN
        c1_hiA <= BinOpOut_1;
      END IF;

      -- Update of register 'c1_loSum'
      IF ( G_CForkIn='1' ) THEN
        c1_loSum <= BinOpOut;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  MuxEnables <= to_stdlogic(BinOpOut_2) & not(to_stdlogic(BinOpOut_2));
  BinOpOut_3 <= ConstOut & G_c5_ttDist_1;
  BinOpOut_2 <= G_c5_ttDist_1(14 DOWNTO 14);
  BinOpOut_8 <= G_c5_base_1 & G_zero;
  G_BinOpOut_6 <= BinOpOut_7(12 DOWNTO 1) & RESIZE(c1_loSum, 12);
  BinOpOut_7 <= BinOpOut_5 + BinOpOut_6;
  BinOpOut_6 <= c1_hiB & c1_loSum(12 DOWNTO 12);
  BinOpOut_5 <= c1_hiA & G_ConstOut;
  BinOpOut_4 <= BinOpOut_3(23 DOWNTO 12);
  BinOpOut_1 <= BinOpOut_8(23 DOWNTO 12);
  BinOpOut <= G_ConstOut & RESIZE(G_c5_ttDist_1, 12);


  -- Port connections:

  G_BinOpOut_6_out <= G_BinOpOut_6;

END;

-- Handel-C macro: 'pxDelayedAssign'
ARCHITECTURE behaviour OF module_norm_core_pxDelayedAssign_5 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Plus
  SIGNAL G_BinOpOut_7 : unsigned(14 DOWNTO 0);

BEGIN

  -- Combinational expressions:

  G_BinOpOut_7 <= G_c4_tta_1 + G_c4_ttb_1;


  -- Port connections:

  G_BinOpOut_7_out <= G_BinOpOut_7;

END;

-- Handel-C macro: 'pxDelayedAssign'
ARCHITECTURE behaviour OF module_norm_core_pxDelayedAssign_6 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Global constant
  CONSTANT G_ConstOut : unsigned(0 DOWNTO 0) := "0";
  -- Concatenation
  SIGNAL BinOpOut : unsigned(9 DOWNTO 0);
  -- Constant value
  CONSTANT G_ConstOut_3 : unsigned(9 DOWNTO 0) := "0011111111";
  -- Minus
  SIGNAL G_BinOpOut_8 : unsigned(9 DOWNTO 0);

BEGIN

  -- Combinational expressions:

  G_BinOpOut_8 <= BinOpOut - G_ConstOut_3;
  BinOpOut <= G_ConstOut & G_c4_index_1;


  -- Port connections:

  G_BinOpOut_8_out <= G_BinOpOut_8;

END;

-- Handel-C macro: 'pxDelayedAssign'
ARCHITECTURE behaviour OF module_norm_core_pxDelayedAssign_7 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Register 'buffer'
  SIGNAL G_bufferZ_3 : unsigned(8 DOWNTO 0);
  -- Take LSBs
  SIGNAL BinOpOut : unsigned(8 DOWNTO 0);

BEGIN

  -- Processes:

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'buffer'
      IF ( G_CForkIn='1' ) THEN
        G_bufferZ_3 <= BinOpOut;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  BinOpOut <= RESIZE(G_c2_aliasWord_1, 9);


  -- Port connections:

  G_bufferZ_3_out <= G_bufferZ_3;

END;

-- Handel-C macro: 'pxDelayedAssign'
ARCHITECTURE behaviour OF module_norm_core_pxDelayedAssign_8 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Register 'buffer'
  SIGNAL G_bufferZ_4 : unsigned(8 DOWNTO 0);

BEGIN

  -- Processes:

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'buffer'
      IF ( G_CForkIn='1' ) THEN
        G_bufferZ_4 <= G_c2_index_1;
      END IF;
    END IF;
  END PROCESS;


  -- Port connections:

  G_bufferZ_4_out <= G_bufferZ_4;

END;

-- Handel-C macro: 'pxDelayedAssign'
ARCHITECTURE behaviour OF module_norm_core_pxDelayedAssign_9 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Register 'buffer'
  SIGNAL G_bufferZ_5 : unsigned(8 DOWNTO 0);
  -- Clock cycle delay
  SIGNAL G_Z_Dones_1 : std_logic;
  -- Take LSBs
  SIGNAL G_BinOpOut_9 : unsigned(63 DOWNTO 0);
  -- Take LSBs
  SIGNAL G_BinOpOut_10 : unsigned(8 DOWNTO 0);

BEGIN

  -- Processes:

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      IF ( iReset='1' ) THEN
        G_Z_Dones_1 <= '0';
      ELSE
        G_Z_Dones_1 <= G_CForkIn;
      END IF;
    END IF;
  END PROCESS;

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'buffer'
      IF ( G_CForkIn='1' ) THEN
        G_bufferZ_5 <= G_BinOpOut_10;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  G_BinOpOut_10 <= RESIZE(G_randVal, 9);
  G_BinOpOut_9 <= RESIZE(G_randVal, 64);


  -- Port connections:

  G_bufferZ_5_out <= G_bufferZ_5;
  G_Z_Dones_1_out <= G_Z_Dones_1;
  G_BinOpOut_9_out <= G_BinOpOut_9;
  G_BinOpOut_10_out <= G_BinOpOut_10;

END;

-- Handel-C macro: 'Gen128'
ARCHITECTURE behaviour OF module_norm_core_Gen128 IS
FUNCTION to_stdlogicvector (x : std_logic) RETURN std_logic_vector IS VARIABLE result : std_logic_vector(0 DOWNTO 0); BEGIN result(0) := x; RETURN result; END;	    FUNCTION to_stdlogic (x : std_logic_vector) RETURN std_logic IS BEGIN RETURN x(0); END;		    FUNCTION to_stdlogic (x : unsigned) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : signed) RETURN std_logic IS VARIABLE result : std_logic_vector(x'LENGTH-1 DOWNTO 0); BEGIN result := STD_LOGIC_VECTOR(x); RETURN result(0); END;			FUNCTION to_stdlogic (x : boolean) RETURN std_logic IS BEGIN CASE x IS WHEN true => RETURN '1'; WHEN false => RETURN '0'; END CASE; END;
  -- Register 'loadDel'
  SIGNAL loadDel : unsigned(0 DOWNTO 0);
  -- Register 'loadValueDel'
  SIGNAL loadValueDel : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_1 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_1 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_2 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_2 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_3 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_3 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_4 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_4 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_5 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_5 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_6 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_6 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_7 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_7 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_8 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_8 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_9 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_9 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_10 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_10 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_11 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_11 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_12 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_12 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_13 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_13 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_14 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_14 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_15 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_15 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_16 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_16 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_17 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_17 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_18 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_18 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_19 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_19 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_20 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_20 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_21 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_21 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_22 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_22 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_23 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_23 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_24 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_24 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_25 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_25 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_26 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_26 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_27 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_27 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_28 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_28 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_29 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_29 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_30 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_30 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_31 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_31 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_32 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_32 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_33 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_33 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_34 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_34 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_35 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_35 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_36 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_36 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_37 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_37 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_38 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_38 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_39 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_39 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_40 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_40 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_41 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_41 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_42 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_42 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_43 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_43 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_44 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_44 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_45 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_45 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_46 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_46 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_47 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_47 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_48 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_48 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_49 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_49 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_50 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_50 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_51 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_51 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_52 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_52 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_53 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_53 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_54 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_54 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_55 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_55 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_56 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_56 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_57 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_57 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_58 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_58 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_59 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_59 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_60 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_60 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_61 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_61 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_62 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_62 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_63 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_63 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_64 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_64 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_65 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_65 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_66 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_66 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_67 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_67 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_68 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_68 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_69 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_69 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_70 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_70 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_71 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_71 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_72 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_72 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_73 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_73 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_74 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_74 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_75 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_75 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_76 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_76 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_77 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_77 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_78 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_78 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_79 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_79 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_80 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_80 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_81 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_81 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_82 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_82 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_83 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_83 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_84 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_84 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_85 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_85 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_86 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_86 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_87 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_87 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_88 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_88 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_89 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_89 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_90 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_90 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_91 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_91 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_92 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_92 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_93 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_93 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_94 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_94 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_95 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_95 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_96 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_96 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_97 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_97 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_98 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_98 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_99 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_99 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_100 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_100 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_101 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_101 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_102 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_102 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_103 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_103 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_104 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_104 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_105 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_105 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_106 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_106 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_107 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_107 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_108 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_108 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_109 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_109 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_110 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_110 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_111 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_111 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_112 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_112 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_113 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_113 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_114 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_114 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_115 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_115 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_116 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_116 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_117 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_117 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_118 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_118 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_119 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_119 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_120 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_120 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_121 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_121 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_122 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_122 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_123 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_123 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_124 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_124 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_125 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_125 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_126 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_126 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_randState_127 : unsigned(0 DOWNTO 0);
  -- Bitwise XOR
  SIGNAL BinOpOut_127 : unsigned(0 DOWNTO 0);
  -- One-Hot Multiplexer
  SIGNAL G_loadValueDel : unsigned(0 DOWNTO 0);
  -- Concatenation
  SIGNAL G_BinOpOut_11 : unsigned(127 DOWNTO 0);
  -- Control path inverter
  SIGNAL S_0 : std_logic;
  -- Concatenation
  SIGNAL MuxEnables : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_1 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_2 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_3 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_4 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_5 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_6 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_7 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_8 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_9 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_10 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_11 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_12 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_13 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_14 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_15 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_16 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_17 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_18 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_19 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_20 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_21 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_22 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_23 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_24 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_25 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_26 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_27 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_28 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_29 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_30 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_31 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_32 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_33 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_34 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_35 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_36 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_37 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_38 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_39 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_40 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_41 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_42 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_43 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_44 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_45 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_46 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_47 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_48 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_49 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_50 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_51 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_52 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_53 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_54 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_55 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_56 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_57 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_58 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_59 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_60 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_61 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_62 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_63 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_64 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_65 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_66 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_67 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_68 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_69 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_70 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_71 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_72 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_73 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_74 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_75 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_76 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_77 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_78 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_79 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_80 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_81 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_82 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_83 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_84 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_85 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_86 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_87 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_88 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_89 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_90 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_91 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_92 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_93 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_94 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_95 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_96 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_97 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_98 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_99 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_100 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_101 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_102 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_103 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_104 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_105 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_106 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_107 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_108 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_109 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_110 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_111 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_112 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_113 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_114 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_115 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_116 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_117 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_118 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_119 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_120 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_121 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_122 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_123 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_124 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_125 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_126 : std_logic_vector(1 DOWNTO 0);
  -- Concatenation
  SIGNAL MuxEnables_127 : std_logic_vector(1 DOWNTO 0);

BEGIN

  -- Processes:

  PROCESS( G_randState_1_1, BinOpOut, MuxEnables ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables IS
      WHEN "10" => G_randState_1 <= G_randState_1_1;
      WHEN "01" => G_randState_1 <= BinOpOut;
      WHEN OTHERS => G_randState_1 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_2_1, BinOpOut_1, MuxEnables_1 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_1 IS
      WHEN "10" => G_randState_2 <= G_randState_2_1;
      WHEN "01" => G_randState_2 <= BinOpOut_1;
      WHEN OTHERS => G_randState_2 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_3_1, BinOpOut_2, MuxEnables_2 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_2 IS
      WHEN "10" => G_randState_3 <= G_randState_3_1;
      WHEN "01" => G_randState_3 <= BinOpOut_2;
      WHEN OTHERS => G_randState_3 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_4_1, BinOpOut_3, MuxEnables_3 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_3 IS
      WHEN "10" => G_randState_4 <= G_randState_4_1;
      WHEN "01" => G_randState_4 <= BinOpOut_3;
      WHEN OTHERS => G_randState_4 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_5_1, BinOpOut_4, MuxEnables_4 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_4 IS
      WHEN "10" => G_randState_5 <= G_randState_5_1;
      WHEN "01" => G_randState_5 <= BinOpOut_4;
      WHEN OTHERS => G_randState_5 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_6_1, BinOpOut_5, MuxEnables_5 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_5 IS
      WHEN "10" => G_randState_6 <= G_randState_6_1;
      WHEN "01" => G_randState_6 <= BinOpOut_5;
      WHEN OTHERS => G_randState_6 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_7_1, BinOpOut_6, MuxEnables_6 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_6 IS
      WHEN "10" => G_randState_7 <= G_randState_7_1;
      WHEN "01" => G_randState_7 <= BinOpOut_6;
      WHEN OTHERS => G_randState_7 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_8_1, BinOpOut_7, MuxEnables_7 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_7 IS
      WHEN "10" => G_randState_8 <= G_randState_8_1;
      WHEN "01" => G_randState_8 <= BinOpOut_7;
      WHEN OTHERS => G_randState_8 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_9_1, BinOpOut_8, MuxEnables_8 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_8 IS
      WHEN "10" => G_randState_9 <= G_randState_9_1;
      WHEN "01" => G_randState_9 <= BinOpOut_8;
      WHEN OTHERS => G_randState_9 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_10_1, BinOpOut_9, MuxEnables_9 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_9 IS
      WHEN "10" => G_randState_10 <= G_randState_10_1;
      WHEN "01" => G_randState_10 <= BinOpOut_9;
      WHEN OTHERS => G_randState_10 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_11_1, BinOpOut_10, MuxEnables_10 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_10 IS
      WHEN "10" => G_randState_11 <= G_randState_11_1;
      WHEN "01" => G_randState_11 <= BinOpOut_10;
      WHEN OTHERS => G_randState_11 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_12_1, BinOpOut_11, MuxEnables_11 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_11 IS
      WHEN "10" => G_randState_12 <= G_randState_12_1;
      WHEN "01" => G_randState_12 <= BinOpOut_11;
      WHEN OTHERS => G_randState_12 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_13_1, BinOpOut_12, MuxEnables_12 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_12 IS
      WHEN "10" => G_randState_13 <= G_randState_13_1;
      WHEN "01" => G_randState_13 <= BinOpOut_12;
      WHEN OTHERS => G_randState_13 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_14_1, BinOpOut_13, MuxEnables_13 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_13 IS
      WHEN "10" => G_randState_14 <= G_randState_14_1;
      WHEN "01" => G_randState_14 <= BinOpOut_13;
      WHEN OTHERS => G_randState_14 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_15_1, BinOpOut_14, MuxEnables_14 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_14 IS
      WHEN "10" => G_randState_15 <= G_randState_15_1;
      WHEN "01" => G_randState_15 <= BinOpOut_14;
      WHEN OTHERS => G_randState_15 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_16_1, BinOpOut_15, MuxEnables_15 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_15 IS
      WHEN "10" => G_randState_16 <= G_randState_16_1;
      WHEN "01" => G_randState_16 <= BinOpOut_15;
      WHEN OTHERS => G_randState_16 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_17_1, BinOpOut_16, MuxEnables_16 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_16 IS
      WHEN "10" => G_randState_17 <= G_randState_17_1;
      WHEN "01" => G_randState_17 <= BinOpOut_16;
      WHEN OTHERS => G_randState_17 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_18_1, BinOpOut_17, MuxEnables_17 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_17 IS
      WHEN "10" => G_randState_18 <= G_randState_18_1;
      WHEN "01" => G_randState_18 <= BinOpOut_17;
      WHEN OTHERS => G_randState_18 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_19_1, BinOpOut_18, MuxEnables_18 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_18 IS
      WHEN "10" => G_randState_19 <= G_randState_19_1;
      WHEN "01" => G_randState_19 <= BinOpOut_18;
      WHEN OTHERS => G_randState_19 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_20_1, BinOpOut_19, MuxEnables_19 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_19 IS
      WHEN "10" => G_randState_20 <= G_randState_20_1;
      WHEN "01" => G_randState_20 <= BinOpOut_19;
      WHEN OTHERS => G_randState_20 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_21_1, BinOpOut_20, MuxEnables_20 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_20 IS
      WHEN "10" => G_randState_21 <= G_randState_21_1;
      WHEN "01" => G_randState_21 <= BinOpOut_20;
      WHEN OTHERS => G_randState_21 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_22_1, BinOpOut_21, MuxEnables_21 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_21 IS
      WHEN "10" => G_randState_22 <= G_randState_22_1;
      WHEN "01" => G_randState_22 <= BinOpOut_21;
      WHEN OTHERS => G_randState_22 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_23_1, BinOpOut_22, MuxEnables_22 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_22 IS
      WHEN "10" => G_randState_23 <= G_randState_23_1;
      WHEN "01" => G_randState_23 <= BinOpOut_22;
      WHEN OTHERS => G_randState_23 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_24_1, BinOpOut_23, MuxEnables_23 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_23 IS
      WHEN "10" => G_randState_24 <= G_randState_24_1;
      WHEN "01" => G_randState_24 <= BinOpOut_23;
      WHEN OTHERS => G_randState_24 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_25_1, BinOpOut_24, MuxEnables_24 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_24 IS
      WHEN "10" => G_randState_25 <= G_randState_25_1;
      WHEN "01" => G_randState_25 <= BinOpOut_24;
      WHEN OTHERS => G_randState_25 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_26_1, BinOpOut_25, MuxEnables_25 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_25 IS
      WHEN "10" => G_randState_26 <= G_randState_26_1;
      WHEN "01" => G_randState_26 <= BinOpOut_25;
      WHEN OTHERS => G_randState_26 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_27_1, BinOpOut_26, MuxEnables_26 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_26 IS
      WHEN "10" => G_randState_27 <= G_randState_27_1;
      WHEN "01" => G_randState_27 <= BinOpOut_26;
      WHEN OTHERS => G_randState_27 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_28_1, BinOpOut_27, MuxEnables_27 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_27 IS
      WHEN "10" => G_randState_28 <= G_randState_28_1;
      WHEN "01" => G_randState_28 <= BinOpOut_27;
      WHEN OTHERS => G_randState_28 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_29_1, BinOpOut_28, MuxEnables_28 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_28 IS
      WHEN "10" => G_randState_29 <= G_randState_29_1;
      WHEN "01" => G_randState_29 <= BinOpOut_28;
      WHEN OTHERS => G_randState_29 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_30_1, BinOpOut_29, MuxEnables_29 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_29 IS
      WHEN "10" => G_randState_30 <= G_randState_30_1;
      WHEN "01" => G_randState_30 <= BinOpOut_29;
      WHEN OTHERS => G_randState_30 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_31_1, BinOpOut_30, MuxEnables_30 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_30 IS
      WHEN "10" => G_randState_31 <= G_randState_31_1;
      WHEN "01" => G_randState_31 <= BinOpOut_30;
      WHEN OTHERS => G_randState_31 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_32_1, BinOpOut_31, MuxEnables_31 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_31 IS
      WHEN "10" => G_randState_32 <= G_randState_32_1;
      WHEN "01" => G_randState_32 <= BinOpOut_31;
      WHEN OTHERS => G_randState_32 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_33_1, BinOpOut_32, MuxEnables_32 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_32 IS
      WHEN "10" => G_randState_33 <= G_randState_33_1;
      WHEN "01" => G_randState_33 <= BinOpOut_32;
      WHEN OTHERS => G_randState_33 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_34_1, BinOpOut_33, MuxEnables_33 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_33 IS
      WHEN "10" => G_randState_34 <= G_randState_34_1;
      WHEN "01" => G_randState_34 <= BinOpOut_33;
      WHEN OTHERS => G_randState_34 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_35_1, BinOpOut_34, MuxEnables_34 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_34 IS
      WHEN "10" => G_randState_35 <= G_randState_35_1;
      WHEN "01" => G_randState_35 <= BinOpOut_34;
      WHEN OTHERS => G_randState_35 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_36_1, BinOpOut_35, MuxEnables_35 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_35 IS
      WHEN "10" => G_randState_36 <= G_randState_36_1;
      WHEN "01" => G_randState_36 <= BinOpOut_35;
      WHEN OTHERS => G_randState_36 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_37_1, BinOpOut_36, MuxEnables_36 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_36 IS
      WHEN "10" => G_randState_37 <= G_randState_37_1;
      WHEN "01" => G_randState_37 <= BinOpOut_36;
      WHEN OTHERS => G_randState_37 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_38_1, BinOpOut_37, MuxEnables_37 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_37 IS
      WHEN "10" => G_randState_38 <= G_randState_38_1;
      WHEN "01" => G_randState_38 <= BinOpOut_37;
      WHEN OTHERS => G_randState_38 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_39_1, BinOpOut_38, MuxEnables_38 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_38 IS
      WHEN "10" => G_randState_39 <= G_randState_39_1;
      WHEN "01" => G_randState_39 <= BinOpOut_38;
      WHEN OTHERS => G_randState_39 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_40_1, BinOpOut_39, MuxEnables_39 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_39 IS
      WHEN "10" => G_randState_40 <= G_randState_40_1;
      WHEN "01" => G_randState_40 <= BinOpOut_39;
      WHEN OTHERS => G_randState_40 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_41_1, BinOpOut_40, MuxEnables_40 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_40 IS
      WHEN "10" => G_randState_41 <= G_randState_41_1;
      WHEN "01" => G_randState_41 <= BinOpOut_40;
      WHEN OTHERS => G_randState_41 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_42_1, BinOpOut_41, MuxEnables_41 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_41 IS
      WHEN "10" => G_randState_42 <= G_randState_42_1;
      WHEN "01" => G_randState_42 <= BinOpOut_41;
      WHEN OTHERS => G_randState_42 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_43_1, BinOpOut_42, MuxEnables_42 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_42 IS
      WHEN "10" => G_randState_43 <= G_randState_43_1;
      WHEN "01" => G_randState_43 <= BinOpOut_42;
      WHEN OTHERS => G_randState_43 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_44_1, BinOpOut_43, MuxEnables_43 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_43 IS
      WHEN "10" => G_randState_44 <= G_randState_44_1;
      WHEN "01" => G_randState_44 <= BinOpOut_43;
      WHEN OTHERS => G_randState_44 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_45_1, BinOpOut_44, MuxEnables_44 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_44 IS
      WHEN "10" => G_randState_45 <= G_randState_45_1;
      WHEN "01" => G_randState_45 <= BinOpOut_44;
      WHEN OTHERS => G_randState_45 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_46_1, BinOpOut_45, MuxEnables_45 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_45 IS
      WHEN "10" => G_randState_46 <= G_randState_46_1;
      WHEN "01" => G_randState_46 <= BinOpOut_45;
      WHEN OTHERS => G_randState_46 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_47_1, BinOpOut_46, MuxEnables_46 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_46 IS
      WHEN "10" => G_randState_47 <= G_randState_47_1;
      WHEN "01" => G_randState_47 <= BinOpOut_46;
      WHEN OTHERS => G_randState_47 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_48_1, BinOpOut_47, MuxEnables_47 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_47 IS
      WHEN "10" => G_randState_48 <= G_randState_48_1;
      WHEN "01" => G_randState_48 <= BinOpOut_47;
      WHEN OTHERS => G_randState_48 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_49_1, BinOpOut_48, MuxEnables_48 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_48 IS
      WHEN "10" => G_randState_49 <= G_randState_49_1;
      WHEN "01" => G_randState_49 <= BinOpOut_48;
      WHEN OTHERS => G_randState_49 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_50_1, BinOpOut_49, MuxEnables_49 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_49 IS
      WHEN "10" => G_randState_50 <= G_randState_50_1;
      WHEN "01" => G_randState_50 <= BinOpOut_49;
      WHEN OTHERS => G_randState_50 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_51_1, BinOpOut_50, MuxEnables_50 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_50 IS
      WHEN "10" => G_randState_51 <= G_randState_51_1;
      WHEN "01" => G_randState_51 <= BinOpOut_50;
      WHEN OTHERS => G_randState_51 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_52_1, BinOpOut_51, MuxEnables_51 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_51 IS
      WHEN "10" => G_randState_52 <= G_randState_52_1;
      WHEN "01" => G_randState_52 <= BinOpOut_51;
      WHEN OTHERS => G_randState_52 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_53_1, BinOpOut_52, MuxEnables_52 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_52 IS
      WHEN "10" => G_randState_53 <= G_randState_53_1;
      WHEN "01" => G_randState_53 <= BinOpOut_52;
      WHEN OTHERS => G_randState_53 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_54_1, BinOpOut_53, MuxEnables_53 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_53 IS
      WHEN "10" => G_randState_54 <= G_randState_54_1;
      WHEN "01" => G_randState_54 <= BinOpOut_53;
      WHEN OTHERS => G_randState_54 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_55_1, BinOpOut_54, MuxEnables_54 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_54 IS
      WHEN "10" => G_randState_55 <= G_randState_55_1;
      WHEN "01" => G_randState_55 <= BinOpOut_54;
      WHEN OTHERS => G_randState_55 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_56_1, BinOpOut_55, MuxEnables_55 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_55 IS
      WHEN "10" => G_randState_56 <= G_randState_56_1;
      WHEN "01" => G_randState_56 <= BinOpOut_55;
      WHEN OTHERS => G_randState_56 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_57_1, BinOpOut_56, MuxEnables_56 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_56 IS
      WHEN "10" => G_randState_57 <= G_randState_57_1;
      WHEN "01" => G_randState_57 <= BinOpOut_56;
      WHEN OTHERS => G_randState_57 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_58_1, BinOpOut_57, MuxEnables_57 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_57 IS
      WHEN "10" => G_randState_58 <= G_randState_58_1;
      WHEN "01" => G_randState_58 <= BinOpOut_57;
      WHEN OTHERS => G_randState_58 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_59_1, BinOpOut_58, MuxEnables_58 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_58 IS
      WHEN "10" => G_randState_59 <= G_randState_59_1;
      WHEN "01" => G_randState_59 <= BinOpOut_58;
      WHEN OTHERS => G_randState_59 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_60_1, BinOpOut_59, MuxEnables_59 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_59 IS
      WHEN "10" => G_randState_60 <= G_randState_60_1;
      WHEN "01" => G_randState_60 <= BinOpOut_59;
      WHEN OTHERS => G_randState_60 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_61_1, BinOpOut_60, MuxEnables_60 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_60 IS
      WHEN "10" => G_randState_61 <= G_randState_61_1;
      WHEN "01" => G_randState_61 <= BinOpOut_60;
      WHEN OTHERS => G_randState_61 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_62_1, BinOpOut_61, MuxEnables_61 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_61 IS
      WHEN "10" => G_randState_62 <= G_randState_62_1;
      WHEN "01" => G_randState_62 <= BinOpOut_61;
      WHEN OTHERS => G_randState_62 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_63_1, BinOpOut_62, MuxEnables_62 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_62 IS
      WHEN "10" => G_randState_63 <= G_randState_63_1;
      WHEN "01" => G_randState_63 <= BinOpOut_62;
      WHEN OTHERS => G_randState_63 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_64_1, BinOpOut_63, MuxEnables_63 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_63 IS
      WHEN "10" => G_randState_64 <= G_randState_64_1;
      WHEN "01" => G_randState_64 <= BinOpOut_63;
      WHEN OTHERS => G_randState_64 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_65_1, BinOpOut_64, MuxEnables_64 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_64 IS
      WHEN "10" => G_randState_65 <= G_randState_65_1;
      WHEN "01" => G_randState_65 <= BinOpOut_64;
      WHEN OTHERS => G_randState_65 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_66_1, BinOpOut_65, MuxEnables_65 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_65 IS
      WHEN "10" => G_randState_66 <= G_randState_66_1;
      WHEN "01" => G_randState_66 <= BinOpOut_65;
      WHEN OTHERS => G_randState_66 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_67_1, BinOpOut_66, MuxEnables_66 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_66 IS
      WHEN "10" => G_randState_67 <= G_randState_67_1;
      WHEN "01" => G_randState_67 <= BinOpOut_66;
      WHEN OTHERS => G_randState_67 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_68_1, BinOpOut_67, MuxEnables_67 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_67 IS
      WHEN "10" => G_randState_68 <= G_randState_68_1;
      WHEN "01" => G_randState_68 <= BinOpOut_67;
      WHEN OTHERS => G_randState_68 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_69_1, BinOpOut_68, MuxEnables_68 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_68 IS
      WHEN "10" => G_randState_69 <= G_randState_69_1;
      WHEN "01" => G_randState_69 <= BinOpOut_68;
      WHEN OTHERS => G_randState_69 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_70_1, BinOpOut_69, MuxEnables_69 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_69 IS
      WHEN "10" => G_randState_70 <= G_randState_70_1;
      WHEN "01" => G_randState_70 <= BinOpOut_69;
      WHEN OTHERS => G_randState_70 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_71_1, BinOpOut_70, MuxEnables_70 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_70 IS
      WHEN "10" => G_randState_71 <= G_randState_71_1;
      WHEN "01" => G_randState_71 <= BinOpOut_70;
      WHEN OTHERS => G_randState_71 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_72_1, BinOpOut_71, MuxEnables_71 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_71 IS
      WHEN "10" => G_randState_72 <= G_randState_72_1;
      WHEN "01" => G_randState_72 <= BinOpOut_71;
      WHEN OTHERS => G_randState_72 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_73_1, BinOpOut_72, MuxEnables_72 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_72 IS
      WHEN "10" => G_randState_73 <= G_randState_73_1;
      WHEN "01" => G_randState_73 <= BinOpOut_72;
      WHEN OTHERS => G_randState_73 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_74_1, BinOpOut_73, MuxEnables_73 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_73 IS
      WHEN "10" => G_randState_74 <= G_randState_74_1;
      WHEN "01" => G_randState_74 <= BinOpOut_73;
      WHEN OTHERS => G_randState_74 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_75_1, BinOpOut_74, MuxEnables_74 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_74 IS
      WHEN "10" => G_randState_75 <= G_randState_75_1;
      WHEN "01" => G_randState_75 <= BinOpOut_74;
      WHEN OTHERS => G_randState_75 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_76_1, BinOpOut_75, MuxEnables_75 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_75 IS
      WHEN "10" => G_randState_76 <= G_randState_76_1;
      WHEN "01" => G_randState_76 <= BinOpOut_75;
      WHEN OTHERS => G_randState_76 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_77_1, BinOpOut_76, MuxEnables_76 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_76 IS
      WHEN "10" => G_randState_77 <= G_randState_77_1;
      WHEN "01" => G_randState_77 <= BinOpOut_76;
      WHEN OTHERS => G_randState_77 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_78_1, BinOpOut_77, MuxEnables_77 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_77 IS
      WHEN "10" => G_randState_78 <= G_randState_78_1;
      WHEN "01" => G_randState_78 <= BinOpOut_77;
      WHEN OTHERS => G_randState_78 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_79_1, BinOpOut_78, MuxEnables_78 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_78 IS
      WHEN "10" => G_randState_79 <= G_randState_79_1;
      WHEN "01" => G_randState_79 <= BinOpOut_78;
      WHEN OTHERS => G_randState_79 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_80_1, BinOpOut_79, MuxEnables_79 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_79 IS
      WHEN "10" => G_randState_80 <= G_randState_80_1;
      WHEN "01" => G_randState_80 <= BinOpOut_79;
      WHEN OTHERS => G_randState_80 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_81_1, BinOpOut_80, MuxEnables_80 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_80 IS
      WHEN "10" => G_randState_81 <= G_randState_81_1;
      WHEN "01" => G_randState_81 <= BinOpOut_80;
      WHEN OTHERS => G_randState_81 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_82_1, BinOpOut_81, MuxEnables_81 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_81 IS
      WHEN "10" => G_randState_82 <= G_randState_82_1;
      WHEN "01" => G_randState_82 <= BinOpOut_81;
      WHEN OTHERS => G_randState_82 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_83_1, BinOpOut_82, MuxEnables_82 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_82 IS
      WHEN "10" => G_randState_83 <= G_randState_83_1;
      WHEN "01" => G_randState_83 <= BinOpOut_82;
      WHEN OTHERS => G_randState_83 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_84_1, BinOpOut_83, MuxEnables_83 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_83 IS
      WHEN "10" => G_randState_84 <= G_randState_84_1;
      WHEN "01" => G_randState_84 <= BinOpOut_83;
      WHEN OTHERS => G_randState_84 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_85_1, BinOpOut_84, MuxEnables_84 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_84 IS
      WHEN "10" => G_randState_85 <= G_randState_85_1;
      WHEN "01" => G_randState_85 <= BinOpOut_84;
      WHEN OTHERS => G_randState_85 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_86_1, BinOpOut_85, MuxEnables_85 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_85 IS
      WHEN "10" => G_randState_86 <= G_randState_86_1;
      WHEN "01" => G_randState_86 <= BinOpOut_85;
      WHEN OTHERS => G_randState_86 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_87_1, BinOpOut_86, MuxEnables_86 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_86 IS
      WHEN "10" => G_randState_87 <= G_randState_87_1;
      WHEN "01" => G_randState_87 <= BinOpOut_86;
      WHEN OTHERS => G_randState_87 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_88_1, BinOpOut_87, MuxEnables_87 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_87 IS
      WHEN "10" => G_randState_88 <= G_randState_88_1;
      WHEN "01" => G_randState_88 <= BinOpOut_87;
      WHEN OTHERS => G_randState_88 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_89_1, BinOpOut_88, MuxEnables_88 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_88 IS
      WHEN "10" => G_randState_89 <= G_randState_89_1;
      WHEN "01" => G_randState_89 <= BinOpOut_88;
      WHEN OTHERS => G_randState_89 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_90_1, BinOpOut_89, MuxEnables_89 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_89 IS
      WHEN "10" => G_randState_90 <= G_randState_90_1;
      WHEN "01" => G_randState_90 <= BinOpOut_89;
      WHEN OTHERS => G_randState_90 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_91_1, BinOpOut_90, MuxEnables_90 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_90 IS
      WHEN "10" => G_randState_91 <= G_randState_91_1;
      WHEN "01" => G_randState_91 <= BinOpOut_90;
      WHEN OTHERS => G_randState_91 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_92_1, BinOpOut_91, MuxEnables_91 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_91 IS
      WHEN "10" => G_randState_92 <= G_randState_92_1;
      WHEN "01" => G_randState_92 <= BinOpOut_91;
      WHEN OTHERS => G_randState_92 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_93_1, BinOpOut_92, MuxEnables_92 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_92 IS
      WHEN "10" => G_randState_93 <= G_randState_93_1;
      WHEN "01" => G_randState_93 <= BinOpOut_92;
      WHEN OTHERS => G_randState_93 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_94_1, BinOpOut_93, MuxEnables_93 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_93 IS
      WHEN "10" => G_randState_94 <= G_randState_94_1;
      WHEN "01" => G_randState_94 <= BinOpOut_93;
      WHEN OTHERS => G_randState_94 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_95_1, BinOpOut_94, MuxEnables_94 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_94 IS
      WHEN "10" => G_randState_95 <= G_randState_95_1;
      WHEN "01" => G_randState_95 <= BinOpOut_94;
      WHEN OTHERS => G_randState_95 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_96_1, BinOpOut_95, MuxEnables_95 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_95 IS
      WHEN "10" => G_randState_96 <= G_randState_96_1;
      WHEN "01" => G_randState_96 <= BinOpOut_95;
      WHEN OTHERS => G_randState_96 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_97_1, BinOpOut_96, MuxEnables_96 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_96 IS
      WHEN "10" => G_randState_97 <= G_randState_97_1;
      WHEN "01" => G_randState_97 <= BinOpOut_96;
      WHEN OTHERS => G_randState_97 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_98_1, BinOpOut_97, MuxEnables_97 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_97 IS
      WHEN "10" => G_randState_98 <= G_randState_98_1;
      WHEN "01" => G_randState_98 <= BinOpOut_97;
      WHEN OTHERS => G_randState_98 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_99_1, BinOpOut_98, MuxEnables_98 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_98 IS
      WHEN "10" => G_randState_99 <= G_randState_99_1;
      WHEN "01" => G_randState_99 <= BinOpOut_98;
      WHEN OTHERS => G_randState_99 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_100_1, BinOpOut_99, MuxEnables_99 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_99 IS
      WHEN "10" => G_randState_100 <= G_randState_100_1;
      WHEN "01" => G_randState_100 <= BinOpOut_99;
      WHEN OTHERS => G_randState_100 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_101_1, BinOpOut_100, MuxEnables_100 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_100 IS
      WHEN "10" => G_randState_101 <= G_randState_101_1;
      WHEN "01" => G_randState_101 <= BinOpOut_100;
      WHEN OTHERS => G_randState_101 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_102_1, BinOpOut_101, MuxEnables_101 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_101 IS
      WHEN "10" => G_randState_102 <= G_randState_102_1;
      WHEN "01" => G_randState_102 <= BinOpOut_101;
      WHEN OTHERS => G_randState_102 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_103_1, BinOpOut_102, MuxEnables_102 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_102 IS
      WHEN "10" => G_randState_103 <= G_randState_103_1;
      WHEN "01" => G_randState_103 <= BinOpOut_102;
      WHEN OTHERS => G_randState_103 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_104_1, BinOpOut_103, MuxEnables_103 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_103 IS
      WHEN "10" => G_randState_104 <= G_randState_104_1;
      WHEN "01" => G_randState_104 <= BinOpOut_103;
      WHEN OTHERS => G_randState_104 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_105_1, BinOpOut_104, MuxEnables_104 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_104 IS
      WHEN "10" => G_randState_105 <= G_randState_105_1;
      WHEN "01" => G_randState_105 <= BinOpOut_104;
      WHEN OTHERS => G_randState_105 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_106_1, BinOpOut_105, MuxEnables_105 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_105 IS
      WHEN "10" => G_randState_106 <= G_randState_106_1;
      WHEN "01" => G_randState_106 <= BinOpOut_105;
      WHEN OTHERS => G_randState_106 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_107_1, BinOpOut_106, MuxEnables_106 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_106 IS
      WHEN "10" => G_randState_107 <= G_randState_107_1;
      WHEN "01" => G_randState_107 <= BinOpOut_106;
      WHEN OTHERS => G_randState_107 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_108_1, BinOpOut_107, MuxEnables_107 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_107 IS
      WHEN "10" => G_randState_108 <= G_randState_108_1;
      WHEN "01" => G_randState_108 <= BinOpOut_107;
      WHEN OTHERS => G_randState_108 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_109_1, BinOpOut_108, MuxEnables_108 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_108 IS
      WHEN "10" => G_randState_109 <= G_randState_109_1;
      WHEN "01" => G_randState_109 <= BinOpOut_108;
      WHEN OTHERS => G_randState_109 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_110_1, BinOpOut_109, MuxEnables_109 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_109 IS
      WHEN "10" => G_randState_110 <= G_randState_110_1;
      WHEN "01" => G_randState_110 <= BinOpOut_109;
      WHEN OTHERS => G_randState_110 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_111_1, BinOpOut_110, MuxEnables_110 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_110 IS
      WHEN "10" => G_randState_111 <= G_randState_111_1;
      WHEN "01" => G_randState_111 <= BinOpOut_110;
      WHEN OTHERS => G_randState_111 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_112_1, BinOpOut_111, MuxEnables_111 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_111 IS
      WHEN "10" => G_randState_112 <= G_randState_112_1;
      WHEN "01" => G_randState_112 <= BinOpOut_111;
      WHEN OTHERS => G_randState_112 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_113_1, BinOpOut_112, MuxEnables_112 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_112 IS
      WHEN "10" => G_randState_113 <= G_randState_113_1;
      WHEN "01" => G_randState_113 <= BinOpOut_112;
      WHEN OTHERS => G_randState_113 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_114_1, BinOpOut_113, MuxEnables_113 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_113 IS
      WHEN "10" => G_randState_114 <= G_randState_114_1;
      WHEN "01" => G_randState_114 <= BinOpOut_113;
      WHEN OTHERS => G_randState_114 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_115_1, BinOpOut_114, MuxEnables_114 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_114 IS
      WHEN "10" => G_randState_115 <= G_randState_115_1;
      WHEN "01" => G_randState_115 <= BinOpOut_114;
      WHEN OTHERS => G_randState_115 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_116_1, BinOpOut_115, MuxEnables_115 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_115 IS
      WHEN "10" => G_randState_116 <= G_randState_116_1;
      WHEN "01" => G_randState_116 <= BinOpOut_115;
      WHEN OTHERS => G_randState_116 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_117_1, BinOpOut_116, MuxEnables_116 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_116 IS
      WHEN "10" => G_randState_117 <= G_randState_117_1;
      WHEN "01" => G_randState_117 <= BinOpOut_116;
      WHEN OTHERS => G_randState_117 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_118_1, BinOpOut_117, MuxEnables_117 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_117 IS
      WHEN "10" => G_randState_118 <= G_randState_118_1;
      WHEN "01" => G_randState_118 <= BinOpOut_117;
      WHEN OTHERS => G_randState_118 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_119_1, BinOpOut_118, MuxEnables_118 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_118 IS
      WHEN "10" => G_randState_119 <= G_randState_119_1;
      WHEN "01" => G_randState_119 <= BinOpOut_118;
      WHEN OTHERS => G_randState_119 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_120_1, BinOpOut_119, MuxEnables_119 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_119 IS
      WHEN "10" => G_randState_120 <= G_randState_120_1;
      WHEN "01" => G_randState_120 <= BinOpOut_119;
      WHEN OTHERS => G_randState_120 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_121_1, BinOpOut_120, MuxEnables_120 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_120 IS
      WHEN "10" => G_randState_121 <= G_randState_121_1;
      WHEN "01" => G_randState_121 <= BinOpOut_120;
      WHEN OTHERS => G_randState_121 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_122_1, BinOpOut_121, MuxEnables_121 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_121 IS
      WHEN "10" => G_randState_122 <= G_randState_122_1;
      WHEN "01" => G_randState_122 <= BinOpOut_121;
      WHEN OTHERS => G_randState_122 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_123_1, BinOpOut_122, MuxEnables_122 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_122 IS
      WHEN "10" => G_randState_123 <= G_randState_123_1;
      WHEN "01" => G_randState_123 <= BinOpOut_122;
      WHEN OTHERS => G_randState_123 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_124_1, BinOpOut_123, MuxEnables_123 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_123 IS
      WHEN "10" => G_randState_124 <= G_randState_124_1;
      WHEN "01" => G_randState_124 <= BinOpOut_123;
      WHEN OTHERS => G_randState_124 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_125_1, BinOpOut_124, MuxEnables_124 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_124 IS
      WHEN "10" => G_randState_125 <= G_randState_125_1;
      WHEN "01" => G_randState_125 <= BinOpOut_124;
      WHEN OTHERS => G_randState_125 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_126_1, BinOpOut_125, MuxEnables_125 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_125 IS
      WHEN "10" => G_randState_126 <= G_randState_126_1;
      WHEN "01" => G_randState_126 <= BinOpOut_125;
      WHEN OTHERS => G_randState_126 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_randState_127_1, BinOpOut_126, MuxEnables_126 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_126 IS
      WHEN "10" => G_randState_127 <= G_randState_127_1;
      WHEN "01" => G_randState_127 <= BinOpOut_126;
      WHEN OTHERS => G_randState_127 <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( loadValueDel, BinOpOut_127, MuxEnables_127 ) BEGIN
    -- One-Hot Multiplexer
    CASE MuxEnables_127 IS
      WHEN "10" => G_loadValueDel <= loadValueDel;
      WHEN "01" => G_loadValueDel <= BinOpOut_127;
      WHEN OTHERS => G_loadValueDel <= (OTHERS => 'X');
    END CASE;
  END PROCESS;

  PROCESS( G_S_0 ) BEGIN
    IF rising_edge( G_S_0 ) THEN
      -- Update of register 'loadValueDel'
      IF ( G_CForkIn='1' ) THEN
        loadValueDel <= G_lev;
      END IF;

      -- Update of register 'loadDel'
      IF ( G_CForkIn='1' ) THEN
        loadDel <= G_leb;
      END IF;
    END IF;
  END PROCESS;


  -- Combinational expressions:

  MuxEnables <= to_stdlogic(loadDel) & S_0;
  MuxEnables_1 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_2 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_3 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_4 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_5 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_6 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_7 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_8 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_9 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_10 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_11 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_12 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_13 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_14 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_15 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_16 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_17 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_18 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_19 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_20 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_21 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_22 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_23 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_24 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_25 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_26 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_27 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_28 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_29 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_30 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_31 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_32 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_33 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_34 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_35 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_36 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_37 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_38 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_39 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_40 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_41 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_42 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_43 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_44 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_45 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_46 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_47 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_48 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_49 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_50 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_51 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_52 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_53 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_54 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_55 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_56 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_57 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_58 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_59 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_60 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_61 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_62 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_63 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_64 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_65 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_66 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_67 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_68 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_69 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_70 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_71 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_72 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_73 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_74 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_75 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_76 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_77 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_78 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_79 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_80 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_81 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_82 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_83 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_84 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_85 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_86 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_87 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_88 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_89 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_90 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_91 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_92 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_93 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_94 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_95 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_96 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_97 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_98 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_99 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_100 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_101 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_102 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_103 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_104 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_105 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_106 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_107 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_108 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_109 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_110 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_111 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_112 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_113 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_114 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_115 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_116 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_117 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_118 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_119 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_120 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_121 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_122 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_123 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_124 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_125 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_126 <= to_stdlogic(loadDel) & S_0;
  MuxEnables_127 <= to_stdlogic(loadDel) & S_0;
  S_0 <= not(to_stdlogic(loadDel));
  G_BinOpOut_11 <= G_randState_0 & G_randState_1_1 & G_randState_2_1 & G_randState_3_1 & G_randState_4_1 & 
    G_randState_5_1 & G_randState_6_1 & G_randState_7_1 & G_randState_8_1 & G_randState_9_1 & G_randState_10_1 & 
    G_randState_11_1 & G_randState_12_1 & G_randState_13_1 & G_randState_14_1 & G_randState_15_1 & G_randState_16_1 & 
    G_randState_17_1 & G_randState_18_1 & G_randState_19_1 & G_randState_20_1 & G_randState_21_1 & G_randState_22_1 & 
    G_randState_23_1 & G_randState_24_1 & G_randState_25_1 & G_randState_26_1 & G_randState_27_1 & G_randState_28_1 & 
    G_randState_29_1 & G_randState_30_1 & G_randState_31_1 & G_randState_32_1 & G_randState_33_1 & G_randState_34_1 & 
    G_randState_35_1 & G_randState_36_1 & G_randState_37_1 & G_randState_38_1 & G_randState_39_1 & G_randState_40_1 & 
    G_randState_41_1 & G_randState_42_1 & G_randState_43_1 & G_randState_44_1 & G_randState_45_1 & G_randState_46_1 & 
    G_randState_47_1 & G_randState_48_1 & G_randState_49_1 & G_randState_50_1 & G_randState_51_1 & G_randState_52_1 & 
    G_randState_53_1 & G_randState_54_1 & G_randState_55_1 & G_randState_56_1 & G_randState_57_1 & G_randState_58_1 & 
    G_randState_59_1 & G_randState_60_1 & G_randState_61_1 & G_randState_62_1 & G_randState_63_1 & G_randState_64_1 & 
    G_randState_65_1 & G_randState_66_1 & G_randState_67_1 & G_randState_68_1 & G_randState_69_1 & G_randState_70_1 & 
    G_randState_71_1 & G_randState_72_1 & G_randState_73_1 & G_randState_74_1 & G_randState_75_1 & G_randState_76_1 & 
    G_randState_77_1 & G_randState_78_1 & G_randState_79_1 & G_randState_80_1 & G_randState_81_1 & G_randState_82_1 & 
    G_randState_83_1 & G_randState_84_1 & G_randState_85_1 & G_randState_86_1 & G_randState_87_1 & G_randState_88_1 & 
    G_randState_89_1 & G_randState_90_1 & G_randState_91_1 & G_randState_92_1 & G_randState_93_1 & G_randState_94_1 & 
    G_randState_95_1 & G_randState_96_1 & G_randState_97_1 & G_randState_98_1 & G_randState_99_1 & G_randState_100_1 & 
    G_randState_101_1 & G_randState_102_1 & G_randState_103_1 & G_randState_104_1 & G_randState_105_1 & 
    G_randState_106_1 & G_randState_107_1 & G_randState_108_1 & G_randState_109_1 & G_randState_110_1 & 
    G_randState_111_1 & G_randState_112_1 & G_randState_113_1 & G_randState_114_1 & G_randState_115_1 & 
    G_randState_116_1 & G_randState_117_1 & G_randState_118_1 & G_randState_119_1 & G_randState_120_1 & 
    G_randState_121_1 & G_randState_122_1 & G_randState_123_1 & G_randState_124_1 & G_randState_125_1 & 
    G_randState_126_1 & G_randState_127_1;
  BinOpOut_127 <= G_randState_72_1 xor G_randState_33_1 xor G_randState_24_1;
  BinOpOut_126 <= G_randState_108_1 xor G_randState_62_1 xor G_randState_24_1;
  BinOpOut_125 <= G_randState_114_1 xor G_randState_83_1 xor G_randState_28_1;
  BinOpOut_124 <= G_randState_55_1 xor G_randState_54_1 xor G_randState_25_1;
  BinOpOut_123 <= G_randState_83_1 xor G_randState_60_1 xor G_randState_27_1;
  BinOpOut_122 <= G_randState_108_1 xor G_randState_90_1 xor G_randState_81_1;
  BinOpOut_121 <= G_randState_115_1 xor G_randState_19_1 xor G_randState_7_1;
  BinOpOut_120 <= G_randState_116_1 xor G_randState_19_1 xor G_randState_16_1;
  BinOpOut_119 <= G_randState_72_1 xor G_randState_30_1 xor G_randState_22_1;
  BinOpOut_118 <= G_randState_104_1 xor G_randState_42_1 xor G_randState_21_1;
  BinOpOut_117 <= G_randState_63_1 xor G_randState_32_1 xor G_randState_6_1;
  BinOpOut_116 <= G_randState_105_1 xor G_randState_55_1 xor G_randState_38_1;
  BinOpOut_115 <= G_randState_89_1 xor G_randState_85_1 xor G_randState_48_1;
  BinOpOut_114 <= G_randState_101_1 xor G_randState_26_1 xor G_randState_9_1;
  BinOpOut_113 <= G_randState_113_1 xor G_randState_81_1 xor G_randState_10_1;
  BinOpOut_112 <= G_randState_109_1 xor G_randState_103_1 xor G_randState_79_1;
  BinOpOut_111 <= G_randState_100_1 xor G_randState_65_1 xor G_randState_26_1;
  BinOpOut_110 <= G_randState_127_1 xor G_randState_121_1 xor G_randState_29_1;
  BinOpOut_109 <= G_randState_123_1 xor G_randState_50_1 xor G_randState_38_1;
  BinOpOut_108 <= G_randState_3_1 xor G_randState_29_1;
  BinOpOut_107 <= G_randState_112_1 xor G_randState_53_1 xor G_randState_0;
  BinOpOut_106 <= G_randState_117_1 xor G_randState_106_1 xor G_randState_91_1;
  BinOpOut_105 <= G_randState_111_1 xor G_randState_103_1 xor G_randState_74_1;
  BinOpOut_104 <= G_randState_39_1 xor G_randState_28_1 xor G_randState_12_1;
  BinOpOut_103 <= G_randState_114_1 xor G_randState_94_1 xor G_randState_33_1;
  BinOpOut_102 <= G_randState_125_1 xor G_randState_98_1 xor G_randState_9_1;
  BinOpOut_101 <= G_randState_92_1 xor G_randState_47_1 xor G_randState_7_1;
  BinOpOut_100 <= G_randState_48_1 xor G_randState_40_1 xor G_randState_34_1;
  BinOpOut_99 <= G_randState_110_1 xor G_randState_94_1 xor G_randState_66_1;
  BinOpOut_98 <= G_randState_110_1 xor G_randState_45_1 xor G_randState_44_1;
  BinOpOut_97 <= G_randState_122_1 xor G_randState_54_1 xor G_randState_53_1;
  BinOpOut_96 <= G_randState_88_1 xor G_randState_65_1 xor G_randState_4_1;
  BinOpOut_95 <= G_randState_8_1 xor G_randState_20_1;
  BinOpOut_94 <= G_randState_57_1 xor G_randState_10_1 xor G_randState_3_1;
  BinOpOut_93 <= G_randState_111_1 xor G_randState_65_1 xor G_randState_46_1;
  BinOpOut_92 <= G_randState_51_1 xor G_randState_34_1 xor G_randState_11_1;
  BinOpOut_91 <= G_randState_64_1 xor G_randState_30_1 xor G_randState_17_1;
  BinOpOut_90 <= G_randState_121_1 xor G_randState_84_1 xor G_randState_31_1;
  BinOpOut_89 <= G_randState_59_1 xor G_randState_27_1 xor G_randState_23_1;
  BinOpOut_88 <= G_randState_118_1 xor G_randState_93_1 xor G_randState_69_1;
  BinOpOut_87 <= G_randState_90_1 xor G_randState_87_1 xor G_randState_56_1;
  BinOpOut_86 <= G_randState_120_1 xor G_randState_22_1 xor G_randState_18_1;
  BinOpOut_85 <= G_randState_109_1 xor G_randState_86_1 xor G_randState_53_1;
  BinOpOut_84 <= G_randState_99_1 xor G_randState_72_1 xor G_randState_52_1;
  BinOpOut_83 <= G_randState_18_1 xor G_randState_82_1;
  BinOpOut_82 <= G_randState_68_1 xor G_randState_30_1 xor G_randState_20_1;
  BinOpOut_81 <= G_randState_106_1 xor G_randState_74_1 xor G_randState_51_1;
  BinOpOut_80 <= G_randState_86_1 xor G_randState_71_1 xor G_randState_4_1;
  BinOpOut_79 <= G_randState_89_1 xor G_randState_43_1 xor G_randState_10_1;
  BinOpOut_78 <= G_randState_125_1 xor G_randState_96_1 xor G_randState_37_1;
  BinOpOut_77 <= G_randState_85_1 xor G_randState_43_1 xor G_randState_6_1;
  BinOpOut_76 <= G_randState_118_1 xor G_randState_104_1 xor G_randState_95_1;
  BinOpOut_75 <= G_randState_73_1 xor G_randState_58_1 xor G_randState_1_1;
  BinOpOut_74 <= G_randState_115_1 xor G_randState_73_1 xor G_randState_63_1;
  BinOpOut_73 <= G_randState_97_1 xor G_randState_36_1 xor G_randState_14_1;
  BinOpOut_72 <= G_randState_112_1 xor G_randState_78_1 xor G_randState_36_1;
  BinOpOut_71 <= G_randState_110_1 xor G_randState_71_1 xor G_randState_63_1;
  BinOpOut_70 <= G_randState_71_1 xor G_randState_62_1 xor G_randState_2_1;
  BinOpOut_69 <= G_randState_126_1 xor G_randState_42_1 xor G_randState_25_1;
  BinOpOut_68 <= G_randState_78_1 xor G_randState_49_1 xor G_randState_46_1;
  BinOpOut_67 <= G_randState_99_1 xor G_randState_41_1 xor G_randState_39_1;
  BinOpOut_66 <= G_randState_124_1 xor G_randState_119_1 xor G_randState_105_1;
  BinOpOut_65 <= G_randState_102_1 xor G_randState_83_1 xor G_randState_61_1;
  BinOpOut_64 <= G_randState_127_1 xor G_randState_98_1 xor G_randState_87_1;
  BinOpOut_63 <= G_randState_124_1 xor G_randState_75_1 xor G_randState_28_1;
  BinOpOut_62 <= G_randState_91_1 xor G_randState_50_1 xor G_randState_45_1;
  BinOpOut_61 <= G_randState_44_1 xor G_randState_40_1 xor G_randState_18_1;
  BinOpOut_60 <= G_randState_93_1 xor G_randState_26_1 xor G_randState_5_1;
  BinOpOut_59 <= G_randState_120_1 xor G_randState_34_1 xor G_randState_33_1;
  BinOpOut_58 <= G_randState_95_1 xor G_randState_116_1;
  BinOpOut_57 <= G_randState_107_1 xor G_randState_17_1 xor G_randState_2_1;
  BinOpOut_56 <= G_randState_61_1 xor G_randState_60_1 xor G_randState_29_1;
  BinOpOut_55 <= G_randState_84_1 xor G_randState_13_1 xor G_randState_8_1;
  BinOpOut_54 <= G_randState_108_1 xor G_randState_70_1 xor G_randState_39_1;
  BinOpOut_53 <= G_randState_114_1 xor G_randState_113_1 xor G_randState_85_1;
  BinOpOut_52 <= G_randState_80_1 xor G_randState_56_1 xor G_randState_16_1;
  BinOpOut_51 <= G_randState_66_1 xor G_randState_59_1 xor G_randState_35_1;
  BinOpOut_50 <= G_randState_125_1 xor G_randState_87_1 xor G_randState_84_1;
  BinOpOut_49 <= G_randState_121_1 xor G_randState_103_1 xor G_randState_15_1;
  BinOpOut_48 <= G_randState_31_1 xor G_randState_24_1 xor G_randState_13_1;
  BinOpOut_47 <= G_randState_118_1 xor G_randState_61_1 xor G_randState_4_1;
  BinOpOut_46 <= G_randState_66_1 xor G_randState_22_1 xor G_randState_13_1;
  BinOpOut_45 <= G_randState_77_1 xor G_randState_68_1 xor G_randState_21_1;
  BinOpOut_44 <= G_randState_82_1 xor G_randState_38_1 xor G_randState_35_1;
  BinOpOut_43 <= G_randState_80_1 xor G_randState_62_1 xor G_randState_50_1;
  BinOpOut_42 <= G_randState_86_1 xor G_randState_23_1 xor G_randState_15_1;
  BinOpOut_41 <= G_randState_68_1 xor G_randState_47_1 xor G_randState_44_1;
  BinOpOut_40 <= G_randState_96_1 xor G_randState_78_1 xor G_randState_49_1;
  BinOpOut_39 <= G_randState_88_1 xor G_randState_37_1 xor G_randState_0;
  BinOpOut_38 <= G_randState_79_1 xor G_randState_14_1 xor G_randState_2_1;
  BinOpOut_37 <= G_randState_75_1 xor G_randState_67_1 xor G_randState_19_1;
  BinOpOut_36 <= G_randState_102_1 xor G_randState_101_1 xor G_randState_76_1;
  BinOpOut_35 <= G_randState_122_1 xor G_randState_104_1 xor G_randState_94_1;
  BinOpOut_34 <= G_randState_122_1 xor G_randState_107_1 xor G_randState_77_1;
  BinOpOut_33 <= G_randState_101_1 xor G_randState_76_1 xor G_randState_11_1;
  BinOpOut_32 <= G_randState_58_1 xor G_randState_57_1 xor G_randState_21_1;
  BinOpOut_31 <= G_randState_119_1 xor G_randState_96_1 xor G_randState_74_1;
  BinOpOut_30 <= G_randState_91_1 xor G_randState_69_1 xor G_randState_41_1;
  BinOpOut_29 <= G_randState_77_1 xor G_randState_64_1 xor G_randState_52_1;
  BinOpOut_28 <= G_randState_115_1 xor G_randState_59_1 xor G_randState_6_1;
  BinOpOut_27 <= G_randState_67_1 xor G_randState_54_1 xor G_randState_45_1;
  BinOpOut_26 <= G_randState_106_1 xor G_randState_97_1 xor G_randState_49_1;
  BinOpOut_25 <= G_randState_123_1 xor G_randState_70_1 xor G_randState_5_1;
  BinOpOut_24 <= G_randState_102_1 xor G_randState_99_1 xor G_randState_92_1;
  BinOpOut_23 <= G_randState_105_1 xor G_randState_80_1 xor G_randState_48_1;
  BinOpOut_22 <= G_randState_55_1 xor G_randState_51_1 xor G_randState_43_1;
  BinOpOut_21 <= G_randState_117_1 xor G_randState_11_1 xor G_randState_5_1;
  BinOpOut_20 <= G_randState_120_1 xor G_randState_64_1 xor G_randState_41_1;
  BinOpOut_19 <= G_randState_100_1 xor G_randState_76_1 xor G_randState_37_1;
  BinOpOut_18 <= G_randState_97_1 xor G_randState_73_1 xor G_randState_23_1;
  BinOpOut_17 <= G_randState_127_1 xor G_randState_98_1 xor G_randState_88_1;
  BinOpOut_16 <= G_randState_42_1 xor G_randState_16_1 xor G_randState_9_1;
  BinOpOut_15 <= G_randState_93_1 xor G_randState_57_1 xor G_randState_15_1;
  BinOpOut_14 <= G_randState_36_1 xor G_randState_35_1 xor G_randState_12_1;
  BinOpOut_13 <= G_randState_90_1 xor G_randState_14_1 xor G_randState_12_1;
  BinOpOut_12 <= G_randState_79_1 xor G_randState_69_1 xor G_randState_46_1;
  BinOpOut_11 <= G_randState_112_1 xor G_randState_60_1 xor G_randState_0;
  BinOpOut_10 <= G_randState_52_1 xor G_randState_40_1 xor G_randState_27_1;
  BinOpOut_9 <= G_randState_124_1 xor G_randState_113_1 xor G_randState_107_1;
  BinOpOut_8 <= G_randState_81_1 xor G_randState_47_1 xor G_randState_17_1;
  BinOpOut_7 <= G_randState_117_1 xor G_randState_56_1 xor G_randState_32_1;
  BinOpOut_6 <= G_randState_111_1 xor G_randState_100_1 xor G_randState_32_1;
  BinOpOut_5 <= G_randState_1_1 xor G_randState_58_1;
  BinOpOut_4 <= G_randState_123_1 xor G_randState_109_1 xor G_randState_75_1;
  BinOpOut_3 <= G_randState_126_1 xor G_randState_119_1 xor G_randState_70_1;
  BinOpOut_2 <= G_randState_67_1 xor G_randState_25_1 xor G_randState_20_1;
  BinOpOut_1 <= G_randState_126_1 xor G_randState_95_1 xor G_randState_7_1;
  BinOpOut <= G_randState_92_1 xor G_randState_89_1 xor G_randState_31_1;


  -- Port connections:

  G_randState_1_out <= G_randState_1;
  G_randState_2_out <= G_randState_2;
  G_randState_3_out <= G_randState_3;
  G_randState_4_out <= G_randState_4;
  G_randState_5_out <= G_randState_5;
  G_randState_6_out <= G_randState_6;
  G_randState_7_out <= G_randState_7;
  G_randState_8_out <= G_randState_8;
  G_randState_9_out <= G_randState_9;
  G_randState_10_out <= G_randState_10;
  G_randState_11_out <= G_randState_11;
  G_randState_12_out <= G_randState_12;
  G_randState_13_out <= G_randState_13;
  G_randState_14_out <= G_randState_14;
  G_randState_15_out <= G_randState_15;
  G_randState_16_out <= G_randState_16;
  G_randState_17_out <= G_randState_17;
  G_randState_18_out <= G_randState_18;
  G_randState_19_out <= G_randState_19;
  G_randState_20_out <= G_randState_20;
  G_randState_21_out <= G_randState_21;
  G_randState_22_out <= G_randState_22;
  G_randState_23_out <= G_randState_23;
  G_randState_24_out <= G_randState_24;
  G_randState_25_out <= G_randState_25;
  G_randState_26_out <= G_randState_26;
  G_randState_27_out <= G_randState_27;
  G_randState_28_out <= G_randState_28;
  G_randState_29_out <= G_randState_29;
  G_randState_30_out <= G_randState_30;
  G_randState_31_out <= G_randState_31;
  G_randState_32_out <= G_randState_32;
  G_randState_33_out <= G_randState_33;
  G_randState_34_out <= G_randState_34;
  G_randState_35_out <= G_randState_35;
  G_randState_36_out <= G_randState_36;
  G_randState_37_out <= G_randState_37;
  G_randState_38_out <= G_randState_38;
  G_randState_39_out <= G_randState_39;
  G_randState_40_out <= G_randState_40;
  G_randState_41_out <= G_randState_41;
  G_randState_42_out <= G_randState_42;
  G_randState_43_out <= G_randState_43;
  G_randState_44_out <= G_randState_44;
  G_randState_45_out <= G_randState_45;
  G_randState_46_out <= G_randState_46;
  G_randState_47_out <= G_randState_47;
  G_randState_48_out <= G_randState_48;
  G_randState_49_out <= G_randState_49;
  G_randState_50_out <= G_randState_50;
  G_randState_51_out <= G_randState_51;
  G_randState_52_out <= G_randState_52;
  G_randState_53_out <= G_randState_53;
  G_randState_54_out <= G_randState_54;
  G_randState_55_out <= G_randState_55;
  G_randState_56_out <= G_randState_56;
  G_randState_57_out <= G_randState_57;
  G_randState_58_out <= G_randState_58;
  G_randState_59_out <= G_randState_59;
  G_randState_60_out <= G_randState_60;
  G_randState_61_out <= G_randState_61;
  G_randState_62_out <= G_randState_62;
  G_randState_63_out <= G_randState_63;
  G_randState_64_out <= G_randState_64;
  G_randState_65_out <= G_randState_65;
  G_randState_66_out <= G_randState_66;
  G_randState_67_out <= G_randState_67;
  G_randState_68_out <= G_randState_68;
  G_randState_69_out <= G_randState_69;
  G_randState_70_out <= G_randState_70;
  G_randState_71_out <= G_randState_71;
  G_randState_72_out <= G_randState_72;
  G_randState_73_out <= G_randState_73;
  G_randState_74_out <= G_randState_74;
  G_randState_75_out <= G_randState_75;
  G_randState_76_out <= G_randState_76;
  G_randState_77_out <= G_randState_77;
  G_randState_78_out <= G_randState_78;
  G_randState_79_out <= G_randState_79;
  G_randState_80_out <= G_randState_80;
  G_randState_81_out <= G_randState_81;
  G_randState_82_out <= G_randState_82;
  G_randState_83_out <= G_randState_83;
  G_randState_84_out <= G_randState_84;
  G_randState_85_out <= G_randState_85;
  G_randState_86_out <= G_randState_86;
  G_randState_87_out <= G_randState_87;
  G_randState_88_out <= G_randState_88;
  G_randState_89_out <= G_randState_89;
  G_randState_90_out <= G_randState_90;
  G_randState_91_out <= G_randState_91;
  G_randState_92_out <= G_randState_92;
  G_randState_93_out <= G_randState_93;
  G_randState_94_out <= G_randState_94;
  G_randState_95_out <= G_randState_95;
  G_randState_96_out <= G_randState_96;
  G_randState_97_out <= G_randState_97;
  G_randState_98_out <= G_randState_98;
  G_randState_99_out <= G_randState_99;
  G_randState_100_out <= G_randState_100;
  G_randState_101_out <= G_randState_101;
  G_randState_102_out <= G_randState_102;
  G_randState_103_out <= G_randState_103;
  G_randState_104_out <= G_randState_104;
  G_randState_105_out <= G_randState_105;
  G_randState_106_out <= G_randState_106;
  G_randState_107_out <= G_randState_107;
  G_randState_108_out <= G_randState_108;
  G_randState_109_out <= G_randState_109;
  G_randState_110_out <= G_randState_110;
  G_randState_111_out <= G_randState_111;
  G_randState_112_out <= G_randState_112;
  G_randState_113_out <= G_randState_113;
  G_randState_114_out <= G_randState_114;
  G_randState_115_out <= G_randState_115;
  G_randState_116_out <= G_randState_116;
  G_randState_117_out <= G_randState_117;
  G_randState_118_out <= G_randState_118;
  G_randState_119_out <= G_randState_119;
  G_randState_120_out <= G_randState_120;
  G_randState_121_out <= G_randState_121;
  G_randState_122_out <= G_randState_122;
  G_randState_123_out <= G_randState_123;
  G_randState_124_out <= G_randState_124;
  G_randState_125_out <= G_randState_125;
  G_randState_126_out <= G_randState_126;
  G_randState_127_out <= G_randState_127;
  G_loadValueDel_out <= G_loadValueDel;
  G_BinOpOut_11_out <= G_BinOpOut_11;

END;

